# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 09:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../documenting.rst:5
msgid "Documenting Python"
msgstr ""

#: ../../documenting.rst:9
msgid ""
"The Python language has a substantial body of documentation, much of it "
"contributed by various authors. The markup used for the Python "
"documentation is `reStructuredText`_, developed by the `docutils`_ "
"project, amended by custom directives and using a toolset named `Sphinx`_"
" to post-process the HTML output."
msgstr ""

#: ../../documenting.rst:14
msgid ""
"This document describes the style guide for our documentation as well as "
"the custom reStructuredText markup introduced by Sphinx to support Python"
" documentation and how it should be used."
msgstr ""

#: ../../documenting.rst:18
msgid ""
"The documentation in HTML, PDF or EPUB format is generated from text "
"files written using the :ref:`reStructuredText format <markup>` and "
"contained in the :ref:`CPython Git repository <setup>`."
msgstr ""

#: ../../documenting.rst:26
msgid ""
"If you're interested in contributing to Python's documentation, there's "
"no need to write reStructuredText if you're not so inclined; plain text "
"contributions are more than welcome as well.  Send an e-mail to "
"docs@python.org or open an issue on the :ref:`tracker <reporting-bugs>`."
msgstr ""

#: ../../documenting.rst:33
msgid "Introduction"
msgstr ""

#: ../../documenting.rst:35
msgid ""
"Python's documentation has long been considered to be good for a free "
"programming language.  There are a number of reasons for this, the most "
"important being the early commitment of Python's creator, Guido van "
"Rossum, to providing documentation on the language and its libraries, and"
" the continuing involvement of the user community in providing assistance"
" for creating and maintaining documentation."
msgstr ""

#: ../../documenting.rst:42
msgid ""
"The involvement of the community takes many forms, from authoring to bug "
"reports to just plain complaining when the documentation could be more "
"complete or easier to use."
msgstr ""

#: ../../documenting.rst:46
msgid ""
"This document is aimed at authors and potential authors of documentation "
"for Python.  More specifically, it is for people contributing to the "
"standard documentation and developing additional documents using the same"
" tools as the standard documents.  This guide will be less useful for "
"authors using the Python documentation tools for topics other than "
"Python, and less useful still for authors not using the tools at all."
msgstr ""

#: ../../documenting.rst:53
msgid ""
"If your interest is in contributing to the Python documentation, but you "
"don't have the time or inclination to learn reStructuredText and the "
"markup structures documented here, there's a welcoming place for you "
"among the Python contributors as well.  Any time you feel that you can "
"clarify existing documentation or provide documentation that's missing, "
"the existing documentation team will gladly work with you to integrate "
"your text, dealing with the markup for you. Please don't let the material"
" in this document stand between the documentation and your desire to help"
" out!"
msgstr ""

#: ../../documenting.rst:65
msgid "Style guide"
msgstr ""

#: ../../documenting.rst:68
msgid "Use of whitespace"
msgstr ""

#: ../../documenting.rst:70
msgid ""
"All reST files use an indentation of 3 spaces; no tabs are allowed.  The "
"maximum line length is 80 characters for normal text, but tables, deeply "
"indented code samples and long links may extend beyond that.  Code "
"example bodies should use normal Python 4-space indentation."
msgstr ""

#: ../../documenting.rst:75
msgid ""
"Make generous use of blank lines where applicable; they help group things"
" together."
msgstr ""

#: ../../documenting.rst:78
msgid ""
"A sentence-ending period may be followed by one or two spaces; while reST"
" ignores the second space, it is customarily put in by some users, for "
"example to aid Emacs' auto-fill mode."
msgstr ""

#: ../../documenting.rst:83 ../../documenting.rst:485
#: ../../documenting.rst:1507
msgid "Footnotes"
msgstr ""

#: ../../documenting.rst:85
msgid ""
"Footnotes are generally discouraged, though they may be used when they "
"are the best way to present specific information. When a footnote "
"reference is added at the end of the sentence, it should follow the "
"sentence-ending punctuation. The reST markup should appear something like"
" this::"
msgstr ""

#: ../../documenting.rst:92
msgid ""
"Footnotes should be gathered at the end of a file, or if the file is very"
" long, at the end of a section. The docutils will automatically create "
"backlinks to the footnote reference."
msgstr ""

#: ../../documenting.rst:96
msgid "Footnotes may appear in the middle of sentences where appropriate."
msgstr ""

#: ../../documenting.rst:99
msgid "Capitalization"
msgstr ""

msgid "Sentence case"
msgstr ""

#: ../../documenting.rst:103
msgid ""
"Sentence case is a set of capitalization rules used in English sentences:"
" the first word is always capitalized and other words are only "
"capitalized if there is a specific rule requiring it."
msgstr ""

#: ../../documenting.rst:107
msgid ""
"In the Python documentation, the use of sentence case in section titles "
"is preferable, but consistency within a unit is more important than "
"following this rule.  If you add a section to a chapter where most "
"sections are in title case, you can either convert all titles to sentence"
" case or use the dominant style in the new section title."
msgstr ""

#: ../../documenting.rst:113
msgid ""
"Sentences that start with a word for which specific rules require "
"starting it with a lower case letter should be avoided."
msgstr ""

#: ../../documenting.rst:118
msgid ""
"Sections that describe a library module often have titles in the form of "
"\"modulename --- Short description of the module.\"  In this case, the "
"description should be capitalized as a stand-alone sentence."
msgstr ""

#: ../../documenting.rst:123
msgid ""
"Many special names are used in the Python documentation, including the "
"names of operating systems, programming languages, standards bodies, and "
"the like. Most of these entities are not assigned any special markup, but"
" the preferred spellings are given here to aid authors in maintaining the"
" consistency of presentation in the Python documentation."
msgstr ""

#: ../../documenting.rst:129
msgid ""
"Other terms and words deserve special mention as well; these conventions "
"should be used to ensure consistency throughout the documentation:"
msgstr ""

#: ../../documenting.rst:138
msgid "CPU"
msgstr ""

#: ../../documenting.rst:133
msgid ""
"For \"central processing unit.\" Many style guides say this should be "
"spelled out on the first use (and if you must use it, do so!). For the "
"Python documentation, this abbreviation should be avoided since there's "
"no reasonable way to predict which occurrence will be the first seen by "
"the reader. It is better to use the word \"processor\" instead."
msgstr ""

#: ../../documenting.rst:142
msgid "POSIX"
msgstr ""

#: ../../documenting.rst:141
msgid ""
"The name assigned to a particular group of standards. This is always "
"uppercase."
msgstr ""

#: ../../documenting.rst:145
msgid "Python"
msgstr ""

#: ../../documenting.rst:145
msgid "The name of our favorite programming language is always capitalized."
msgstr ""

#: ../../documenting.rst:150
msgid "reST"
msgstr ""

#: ../../documenting.rst:148
msgid ""
"For \"reStructuredText,\" an easy to read, plaintext markup syntax used "
"to produce Python documentation.  When spelled out, it is always one word"
" and both forms start with a lower case 'r'."
msgstr ""

#: ../../documenting.rst:154
msgid "Unicode"
msgstr ""

#: ../../documenting.rst:153
msgid "The name of a character coding system. This is always written capitalized."
msgstr ""

#: ../../documenting.rst:158
msgid "Unix"
msgstr ""

#: ../../documenting.rst:157
msgid ""
"The name of the operating system developed at AT&T Bell Labs in the early"
" 1970s."
msgstr ""

#: ../../documenting.rst:161
msgid "Affirmative Tone"
msgstr ""

#: ../../documenting.rst:163
msgid ""
"The documentation focuses on affirmatively stating what the language does"
" and how to use it effectively."
msgstr ""

#: ../../documenting.rst:166
msgid ""
"Except for certain security or segfault risks, the docs should avoid "
"wording along the lines of \"feature x is dangerous\" or \"experts "
"only\".  These kinds of value judgments belong in external blogs and "
"wikis, not in the core documentation."
msgstr ""

#: ../../documenting.rst:171
msgid "Bad example (creating worry in the mind of a reader):"
msgstr ""

#: ../../documenting.rst:173
msgid ""
"Warning: failing to explicitly close a file could result in lost data or "
"excessive resource consumption.  Never rely on reference counting to "
"automatically close a file."
msgstr ""

#: ../../documenting.rst:177
msgid ""
"Good example (establishing confident knowledge in the effective use of "
"the language):"
msgstr ""

#: ../../documenting.rst:180
msgid ""
"A best practice for using files is use a try/finally pair to explicitly "
"close a file after it is used.  Alternatively, using a with-statement can"
" achieve the same effect.  This assures that files are flushed and file "
"descriptor resources are released in a timely manner."
msgstr ""

#: ../../documenting.rst:186
msgid "Economy of Expression"
msgstr ""

#: ../../documenting.rst:188
msgid ""
"More documentation is not necessarily better documentation.  Err on the "
"side of being succinct."
msgstr ""

#: ../../documenting.rst:191
msgid ""
"It is an unfortunate fact that making documentation longer can be an "
"impediment to understanding and can result in even more ways to misread "
"or misinterpret the text.  Long descriptions full of corner cases and "
"caveats can create the impression that a function is more complex or "
"harder to use than it actually is."
msgstr ""

#: ../../documenting.rst:197
msgid "Security Considerations (and Other Concerns)"
msgstr ""

#: ../../documenting.rst:199
msgid ""
"Some modules provided with Python are inherently exposed to security "
"issues (e.g. shell injection vulnerabilities) due to the purpose of the "
"module (e.g. :mod:`ssl`).  Littering the documentation of these modules "
"with red warning boxes for problems that are due to the task at hand, "
"rather than specifically to Python's support for that task, doesn't make "
"for a good reading experience."
msgstr ""

#: ../../documenting.rst:206
msgid ""
"Instead, these security concerns should be gathered into a dedicated "
"\"Security Considerations\" section within the module's documentation, "
"and cross-referenced from the documentation of affected interfaces with a"
" note similar to ``\"Please refer to the :ref:`security-considerations` "
"section for important information on how to avoid common mistakes.\"``."
msgstr ""

#: ../../documenting.rst:212
msgid ""
"Similarly, if there is a common error that affects many interfaces in a "
"module (e.g. OS level pipe buffers filling up and stalling child "
"processes), these can be documented in a \"Common Errors\" section and "
"cross-referenced rather than repeated for every affected interface."
msgstr ""

#: ../../documenting.rst:218
msgid "Code Examples"
msgstr ""

#: ../../documenting.rst:220
msgid ""
"Short code examples can be a useful adjunct to understanding.  Readers "
"can often grasp a simple example more quickly than they can digest a "
"formal description in prose."
msgstr ""

#: ../../documenting.rst:224
msgid ""
"People learn faster with concrete, motivating examples that match the "
"context of a typical use case.  For instance, the :meth:`str.rpartition` "
"method is better demonstrated with an example splitting the domain from a"
" URL than it would be with an example of removing the last word from a "
"line of Monty Python dialog."
msgstr ""

#: ../../documenting.rst:229
msgid ""
"The ellipsis for the :py:data:`sys.ps2` secondary interpreter prompt "
"should only be used sparingly, where it is necessary to clearly "
"differentiate between input lines and output lines.  Besides contributing"
" visual clutter, it makes it difficult for readers to cut-and-paste "
"examples so they can experiment with variations."
msgstr ""

#: ../../documenting.rst:236
msgid "Code Equivalents"
msgstr ""

#: ../../documenting.rst:238
msgid ""
"Giving pure Python code equivalents (or approximate equivalents) can be a"
" useful adjunct to a prose description.  A documenter should carefully "
"weigh whether the code equivalent adds value."
msgstr ""

#: ../../documenting.rst:242
msgid ""
"A good example is the code equivalent for :func:`all`.  The short 4-line "
"code equivalent is easily digested; it re-emphasizes the early-out "
"behavior; and it clarifies the handling of the corner-case where the "
"iterable is empty.  In addition, it serves as a model for people wanting "
"to implement a commonly requested alternative where :func:`all` would "
"return the specific object evaluating to False whenever the function "
"terminates early."
msgstr ""

#: ../../documenting.rst:249
msgid ""
"A more questionable example is the code for :func:`itertools.groupby`.  "
"Its code equivalent borders on being too complex to be a quick aid to "
"understanding. Despite its complexity, the code equivalent was kept "
"because it serves as a model to alternative implementations and because "
"the operation of the \"grouper\" is more easily shown in code than in "
"English prose."
msgstr ""

#: ../../documenting.rst:255
msgid ""
"An example of when not to use a code equivalent is for the :func:`oct` "
"function. The exact steps in converting a number to octal doesn't add "
"value for a user trying to learn what the function does."
msgstr ""

#: ../../documenting.rst:260
msgid "Audience"
msgstr ""

#: ../../documenting.rst:262
msgid ""
"The tone of the tutorial (and all the docs) needs to be respectful of the"
" reader's intelligence.  Don't presume that the readers are stupid.  Lay "
"out the relevant information, show motivating use cases, provide glossary"
" links, and do your best to connect-the-dots, but don't talk down to them"
" or waste their time."
msgstr ""

#: ../../documenting.rst:267
msgid ""
"The tutorial is meant for newcomers, many of whom will be using the "
"tutorial to evaluate the language as a whole.  The experience needs to be"
" positive and not leave the reader with worries that something bad will "
"happen if they make a misstep.  The tutorial serves as guide for "
"intelligent and curious readers, saving details for the how-to guides and"
" other sources."
msgstr ""

#: ../../documenting.rst:273
msgid ""
"Be careful accepting requests for documentation changes from the rare but"
" vocal category of reader who is looking for vindication for one of their"
" programming errors (\"I made a mistake, therefore the docs must be wrong"
" ...\").  Typically, the documentation wasn't consulted until after the "
"error was made.  It is unfortunate, but typically no documentation edit "
"would have saved the user from making false assumptions about the "
"language (\"I was surprised by ...\")."
msgstr ""

#: ../../documenting.rst:284
msgid "reStructuredText Primer"
msgstr ""

#: ../../documenting.rst:286
msgid ""
"This section is a brief introduction to reStructuredText (reST) concepts "
"and syntax, intended to provide authors with enough information to author"
" documents productively.  Since reST was designed to be a simple, "
"unobtrusive markup language, this will not take too long."
msgstr ""

#: ../../documenting.rst:293
msgid ""
"The authoritative `reStructuredText User Documentation "
"<http://docutils.sourceforge.net/rst.html>`_."
msgstr ""

#: ../../documenting.rst:298
msgid "Paragraphs"
msgstr ""

#: ../../documenting.rst:300
msgid ""
"The paragraph is the most basic block in a reST document.  Paragraphs are"
" simply chunks of text separated by one or more blank lines.  As in "
"Python, indentation is significant in reST, so all lines of the same "
"paragraph must be left-aligned to the same level of indentation."
msgstr ""

#: ../../documenting.rst:307 ../../documenting.rst:908
msgid "Inline markup"
msgstr ""

#: ../../documenting.rst:309
msgid "The standard reST inline markup is quite simple: use"
msgstr ""

#: ../../documenting.rst:311
msgid "one asterisk: ``*text*`` for emphasis (italics),"
msgstr ""

#: ../../documenting.rst:312
msgid "two asterisks: ``**text**`` for strong emphasis (boldface), and"
msgstr ""

#: ../../documenting.rst:313
msgid "backquotes: ````text```` for code samples."
msgstr ""

#: ../../documenting.rst:315
msgid ""
"If asterisks or backquotes appear in running text and could be confused "
"with inline markup delimiters, they have to be escaped with a backslash."
msgstr ""

#: ../../documenting.rst:318
msgid "Be aware of some restrictions of this markup:"
msgstr ""

#: ../../documenting.rst:320
msgid "it may not be nested,"
msgstr ""

#: ../../documenting.rst:321
msgid "content may not start or end with whitespace: ``* text*`` is wrong,"
msgstr ""

#: ../../documenting.rst:322
msgid ""
"it must be separated from surrounding text by non-word characters.  Use a"
" backslash escaped space to work around that: ``thisis\\ *one*\\ word``."
msgstr ""

#: ../../documenting.rst:325
msgid "These restrictions may be lifted in future versions of the docutils."
msgstr ""

#: ../../documenting.rst:327
msgid ""
"reST also allows for custom \"interpreted text roles\"', which signify "
"that the enclosed text should be interpreted in a specific way.  Sphinx "
"uses this to provide semantic markup and cross-referencing of "
"identifiers, as described in the appropriate section.  The general syntax"
" is ``:rolename:`content```."
msgstr ""

#: ../../documenting.rst:334
msgid "Lists and Quotes"
msgstr ""

#: ../../documenting.rst:336
msgid ""
"List markup is natural: just place an asterisk at the start of a "
"paragraph and indent properly.  The same goes for numbered lists; they "
"can also be automatically numbered using a ``#`` sign::"
msgstr ""

#: ../../documenting.rst:351
msgid ""
"Nested lists are possible, but be aware that they must be separated from "
"the parent list items by blank lines::"
msgstr ""

#: ../../documenting.rst:362
msgid "Definition lists are created as follows::"
msgstr ""

#: ../../documenting.rst:373
msgid ""
"Paragraphs are quoted by just indenting them more than the surrounding "
"paragraphs."
msgstr ""

#: ../../documenting.rst:378
msgid "Source Code"
msgstr ""

#: ../../documenting.rst:380
msgid ""
"Literal code blocks are introduced by ending a paragraph with the special"
" marker ``::``.  The literal block must be indented::"
msgstr ""

#: ../../documenting.rst:392
msgid "The handling of the ``::`` marker is smart:"
msgstr ""

#: ../../documenting.rst:394
msgid ""
"If it occurs as a paragraph of its own, that paragraph is completely left"
" out of the document."
msgstr ""

#: ../../documenting.rst:396
msgid "If it is preceded by whitespace, the marker is removed."
msgstr ""

#: ../../documenting.rst:397
msgid ""
"If it is preceded by non-whitespace, the marker is replaced by a single "
"colon."
msgstr ""

#: ../../documenting.rst:400
msgid ""
"That way, the second sentence in the above example's first paragraph "
"would be rendered as \"The next paragraph is a code sample:\"."
msgstr ""

#: ../../documenting.rst:405
msgid "Hyperlinks"
msgstr ""

#: ../../documenting.rst:408
msgid "External links"
msgstr ""

#: ../../documenting.rst:410
msgid ""
"Use ```Link text <http://target>`_`` for inline web links.  If the link "
"text should be the web address, you don't need special markup at all, the"
" parser finds links and mail addresses in ordinary text."
msgstr ""

#: ../../documenting.rst:415
msgid "Internal links"
msgstr ""

#: ../../documenting.rst:417
msgid ""
"Internal linking is done via a special reST role, see the section on "
"specific markup, :ref:`doc-ref-role`."
msgstr ""

#: ../../documenting.rst:422
msgid "Sections"
msgstr ""

#: ../../documenting.rst:424
msgid ""
"Section headers are created by underlining (and optionally overlining) "
"the section title with a punctuation character, at least as long as the "
"text::"
msgstr ""

#: ../../documenting.rst:431
msgid ""
"Normally, there are no heading levels assigned to certain characters as "
"the structure is determined from the succession of headings.  However, "
"for the Python documentation, here is a suggested convention:"
msgstr ""

#: ../../documenting.rst:435
msgid "``#`` with overline, for parts"
msgstr ""

#: ../../documenting.rst:436
msgid "``*`` with overline, for chapters"
msgstr ""

#: ../../documenting.rst:437
msgid "``=``, for sections"
msgstr ""

#: ../../documenting.rst:438
msgid "``-``, for subsections"
msgstr ""

#: ../../documenting.rst:439
msgid "``^``, for subsubsections"
msgstr ""

#: ../../documenting.rst:440
msgid "``\"``, for paragraphs"
msgstr ""

#: ../../documenting.rst:444
msgid "Explicit Markup"
msgstr ""

#: ../../documenting.rst:446
msgid ""
"\"Explicit markup\" is used in reST for most constructs that need special"
" handling, such as footnotes, specially-highlighted paragraphs, comments,"
" and generic directives."
msgstr ""

#: ../../documenting.rst:450
msgid ""
"An explicit markup block begins with a line starting with ``..`` followed"
" by whitespace and is terminated by the next paragraph at the same level "
"of indentation.  (There needs to be a blank line between explicit markup "
"and normal paragraphs.  This may all sound a bit complicated, but it is "
"intuitive enough when you write it.)"
msgstr ""

#: ../../documenting.rst:458
msgid "Directives"
msgstr ""

#: ../../documenting.rst:460
msgid ""
"A directive is a generic block of explicit markup.  Besides roles, it is "
"one of the extension mechanisms of reST, and Sphinx makes heavy use of "
"it."
msgstr ""

#: ../../documenting.rst:463
msgid ""
"Basically, a directive consists of a name, arguments, options and "
"content. (Keep this terminology in mind, it is used in the next chapter "
"describing custom directives.)  Looking at this example,"
msgstr ""

#: ../../documenting.rst:475
msgid ""
"``function`` is the directive name.  It is given two arguments here, the "
"remainder of the first line and the second line, as well as one option "
"``bar`` (as you can see, options are given in the lines immediately "
"following the arguments and indicated by the colons)."
msgstr ""

#: ../../documenting.rst:480
msgid ""
"The directive content follows after a blank line and is indented relative"
" to the directive start."
msgstr ""

#: ../../documenting.rst:487
msgid ""
"For footnotes, use ``[#]_`` to mark the footnote location, and add the "
"footnote body at the bottom of the document after a \"Footnotes\" rubric "
"heading, like so::"
msgstr ""

#: ../../documenting.rst:497
msgid "You can also explicitly number the footnotes for better context."
msgstr ""

#: ../../documenting.rst:501
msgid "Comments"
msgstr ""

#: ../../documenting.rst:503
msgid ""
"Every explicit markup block which isn't a valid markup construct (like "
"the footnotes above) is regarded as a comment."
msgstr ""

#: ../../documenting.rst:508
msgid "Source encoding"
msgstr ""

#: ../../documenting.rst:510
msgid ""
"Since the easiest way to include special characters like em dashes or "
"copyright signs in reST is to directly write them as Unicode characters, "
"one has to specify an encoding:"
msgstr ""

#: ../../documenting.rst:514
msgid ""
"All Python documentation source files must be in UTF-8 encoding, and the "
"HTML documents written from them will be in that encoding as well."
msgstr ""

#: ../../documenting.rst:519
msgid "Gotchas"
msgstr ""

#: ../../documenting.rst:521
msgid ""
"There are some problems one commonly runs into while authoring reST "
"documents:"
msgstr ""

#: ../../documenting.rst:523
msgid ""
"**Separation of inline markup:** As said above, inline markup spans must "
"be separated from the surrounding text by non-word characters, you have "
"to use an escaped space to get around that."
msgstr ""

#: ../../documenting.rst:529
msgid "Additional Markup Constructs"
msgstr ""

#: ../../documenting.rst:531
msgid ""
"Sphinx adds a lot of new directives and interpreted text roles to "
"standard reST markup.  This section contains the reference material for "
"these facilities. Documentation for \"standard\" reST constructs is not "
"included here, though they are used in the Python documentation."
msgstr ""

#: ../../documenting.rst:538
msgid ""
"This is just an overview of Sphinx' extended markup capabilities; full "
"coverage can be found in `its own documentation <http://sphinx-"
"doc.org/>`_."
msgstr ""

#: ../../documenting.rst:544
msgid "Meta-information markup"
msgstr ""

#: ../../documenting.rst:548
msgid ""
"Identifies the author of the current section.  The argument should "
"include the author's name such that it can be used for presentation "
"(though it isn't) and email address.  The domain name portion of the "
"address should be lower case.  Example::"
msgstr ""

#: ../../documenting.rst:555
msgid ""
"Currently, this markup isn't reflected in the output in any way, but it "
"helps keep track of contributions."
msgstr ""

#: ../../documenting.rst:560
msgid "Module-specific markup"
msgstr ""

#: ../../documenting.rst:562
msgid ""
"The markup described in this section is used to provide information about"
" a module being documented.  Each module should be documented in its own "
"file. Normally this markup appears after the title heading of that file; "
"a typical file might start like this::"
msgstr ""

#: ../../documenting.rst:576
msgid ""
"As you can see, the module-specific markup consists of two directives, "
"the ``module`` directive and the ``moduleauthor`` directive."
msgstr ""

#: ../../documenting.rst:581
msgid ""
"This directive marks the beginning of the description of a module, "
"package, or submodule. The name should be fully qualified (i.e. including"
" the package name for submodules)."
msgstr ""

#: ../../documenting.rst:585
msgid ""
"The ``platform`` option, if present, is a comma-separated list of the "
"platforms on which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short "
"identifiers; examples that are in use include \"IRIX\", \"Mac\", "
"\"Windows\", and \"Unix\".  It is important to use a key which has "
"already been used when applicable."
msgstr ""

#: ../../documenting.rst:591
msgid ""
"The ``synopsis`` option should consist of one sentence describing the "
"module's purpose -- it is currently only used in the Global Module Index."
msgstr ""

#: ../../documenting.rst:594
msgid ""
"The ``deprecated`` option can be given (with no value) to mark a module "
"as deprecated; it will be designated as such in various locations then."
msgstr ""

#: ../../documenting.rst:599
msgid ""
"The ``moduleauthor`` directive, which can appear multiple times, names "
"the authors of the module code, just like ``sectionauthor`` names the "
"author(s) of a piece of documentation.  It too does not result in any "
"output currently."
msgstr ""

#: ../../documenting.rst:605
msgid ""
"It is important to make the section title of a module-describing file "
"meaningful since that value will be inserted in the table-of-contents "
"trees in overview files."
msgstr ""

#: ../../documenting.rst:611
msgid "Information units"
msgstr ""

#: ../../documenting.rst:613
msgid ""
"There are a number of directives used to describe specific features "
"provided by modules.  Each directive requires one or more signatures to "
"provide basic information about what is being described, and the content "
"should be the description.  The basic version makes entries in the "
"general index; if no index entry is desired, you can give the directive "
"option flag ``:noindex:``.  The following example shows all of the "
"features of this directive type::"
msgstr ""

#: ../../documenting.rst:626
msgid ""
"The signatures of object methods or data attributes should not include "
"the class name, but be nested in a class directive.  The generated files "
"will reflect this nesting, and the target identifiers (for HTML output) "
"will use both the class and method name, to enable consistent cross-"
"references.  If you describe methods belonging to an abstract protocol "
"such as context managers, use a class directive with a (pseudo-)type name"
" too to make the index entries more informative."
msgstr ""

#: ../../documenting.rst:634
msgid "The directives are:"
msgstr ""

#: ../../documenting.rst:638
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../../documenting.rst:642
msgid ""
"This is also used to describe function-like preprocessor macros.  The "
"names of the arguments should be given so they may be used in the "
"description."
msgstr ""

#: ../../documenting.rst:645
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, "
"as it is not parsed by the reST inliner."
msgstr ""

#: ../../documenting.rst:650
msgid "Describes a C struct member. Example signature::"
msgstr ""

#: ../../documenting.rst:654
msgid ""
"The text of the description should include the range of values allowed, "
"how the value should be interpreted, and whether the value can be "
"changed. References to structure members in text should use the "
"``member`` role."
msgstr ""

#: ../../documenting.rst:660
msgid ""
"Describes a \"simple\" C macro.  Simple macros are macros which are used "
"for code expansion, but which do not take arguments so cannot be "
"described as functions.  This is not to be used for simple constant "
"definitions.  Examples of its use in the Python documentation include "
":c:macro:`PyObject_HEAD` and :c:macro:`Py_BEGIN_ALLOW_THREADS`."
msgstr ""

#: ../../documenting.rst:668
msgid "Describes a C type. The signature should just be the type name."
msgstr ""

#: ../../documenting.rst:672
msgid ""
"Describes a global C variable.  The signature should include the type, "
"such as::"
msgstr ""

#: ../../documenting.rst:679
msgid ""
"Describes global data in a module, including both variables and values "
"used as \"defined constants.\"  Class and object attributes are not "
"documented using this directive."
msgstr ""

#: ../../documenting.rst:685
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr ""

#: ../../documenting.rst:690
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters, enclosing optional parameters in brackets.  Default values "
"can be given if it enhances clarity.  For example::"
msgstr ""

#: ../../documenting.rst:696
msgid ""
"Object methods are not documented using this directive. Bound object "
"methods placed in the module namespace as part of the public interface of"
" the module are documented using this, as they are equivalent to normal "
"functions for most purposes."
msgstr ""

#: ../../documenting.rst:701
msgid ""
"The description should include information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions.  A small"
" example may be provided."
msgstr ""

#: ../../documenting.rst:708
msgid ""
"Describes a module-level coroutine.  The description should include "
"similar information to that described for ``function``."
msgstr ""

#: ../../documenting.rst:713
msgid ""
"Describes a decorator function.  The signature should *not* represent the"
" signature of the actual function, but the usage as a decorator.  For "
"example, given the functions"
msgstr ""

#: ../../documenting.rst:729
msgid "the descriptions should look like this::"
msgstr ""

#: ../../documenting.rst:739
msgid ""
"There is no ``deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the ``:func:`` role."
msgstr ""

#: ../../documenting.rst:744
msgid ""
"Describes a class.  The signature can include parentheses with parameters"
" which will be shown as the constructor arguments."
msgstr ""

#: ../../documenting.rst:749
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may "
"be changed directly.  This directive should be nested in a class "
"directive, like in this example::"
msgstr ""

#: ../../documenting.rst:762
msgid ""
"If is also possible to document an attribute outside of a class "
"directive, for example if the documentation for different attributes and "
"methods is split in multiple sections.  The class name should then be "
"included explicitly::"
msgstr ""

#: ../../documenting.rst:771
msgid ""
"Describes an object method.  The parameters should not include the "
"``self`` parameter.  The description should include similar information "
"to that described for ``function``.  This directive should be nested in a"
" class directive, like in the example above."
msgstr ""

#: ../../documenting.rst:778
msgid ""
"Describes an object coroutine method.  The parameters should not include "
"the ``self`` parameter.  The description should include similar "
"information to that described for ``function``.  This directive should be"
" nested in a ``class`` directive."
msgstr ""

#: ../../documenting.rst:785
msgid "Same as ``decorator``, but for decorators that are methods."
msgstr ""

#: ../../documenting.rst:787
msgid "Refer to a decorator method using the ``:meth:`` role."
msgstr ""

#: ../../documenting.rst:791
msgid ""
"Describes an object static method.  The description should include "
"similar information to that described for ``function``.  This directive "
"should be nested in a ``class`` directive."
msgstr ""

#: ../../documenting.rst:797
msgid ""
"Describes an object class method.  The parameters should not include the "
"``cls`` parameter.  The description should include similar information to"
" that described for ``function``.  This directive should be nested in a "
"``class`` directive."
msgstr ""

#: ../../documenting.rst:804
msgid ""
"Describes an object abstract method.  The description should include "
"similar information to that described for ``function``.  This directive "
"should be nested in a ``class`` directive."
msgstr ""

#: ../../documenting.rst:810
msgid "Describes a Python :term:`bytecode` instruction."
msgstr ""

#: ../../documenting.rst:814
msgid ""
"Describes a Python command line option or switch.  Option argument names "
"should be enclosed in angle brackets.  Example::"
msgstr ""

#: ../../documenting.rst:823
msgid "Describes an environment variable that Python uses or defines."
msgstr ""

#: ../../documenting.rst:826
msgid "There is also a generic version of these directives:"
msgstr ""

#: ../../documenting.rst:830
msgid ""
"This directive produces the same formatting as the specific ones "
"explained above but does not create index entries or cross-referencing "
"targets.  It is used, for example, to describe the directives in this "
"document. Example::"
msgstr ""

#: ../../documenting.rst:840
msgid "Showing code examples"
msgstr ""

#: ../../documenting.rst:842
msgid ""
"Examples of Python source code or interactive sessions are represented "
"using standard reST literal blocks.  They are started by a ``::`` at the "
"end of the preceding paragraph and delimited by indentation."
msgstr ""

#: ../../documenting.rst:846
msgid ""
"Representing an interactive session requires including the prompts and "
"output along with the Python code.  No special markup is required for "
"interactive sessions.  After the last line of input or output presented, "
"there should not be an \"unused\" primary prompt; this is an example of "
"what *not* to do:"
msgstr ""

#: ../../documenting.rst:857
msgid "Syntax highlighting is handled in a smart way:"
msgstr ""

#: ../../documenting.rst:859
msgid ""
"There is a \"highlighting language\" for each source file.  By default, "
"this is ``'python'`` as the majority of files will have to highlight "
"Python snippets."
msgstr ""

#: ../../documenting.rst:863
msgid ""
"Within Python highlighting mode, interactive sessions are recognized "
"automatically and highlighted appropriately."
msgstr ""

#: ../../documenting.rst:866
msgid ""
"The highlighting language can be changed using the ``highlight`` "
"directive, used as follows::"
msgstr ""

#: ../../documenting.rst:871
msgid ""
"This language is used until the next ``highlight`` directive is "
"encountered."
msgstr ""

#: ../../documenting.rst:874
msgid ""
"The ``code-block`` directive can be used to specify the highlight "
"language of a single code block, e.g.::"
msgstr ""

#: ../../documenting.rst:885
msgid "The values normally used for the highlighting language are:"
msgstr ""

#: ../../documenting.rst:887
msgid "``python`` (the default)"
msgstr ""

#: ../../documenting.rst:888
msgid "``c``"
msgstr ""

#: ../../documenting.rst:889
msgid "``rest``"
msgstr ""

#: ../../documenting.rst:890
msgid "``none`` (no highlighting)"
msgstr ""

#: ../../documenting.rst:892
msgid ""
"If highlighting with the current language fails, the block is not "
"highlighted in any way."
msgstr ""

#: ../../documenting.rst:895
msgid ""
"Longer displays of verbatim text may be included by storing the example "
"text in an external file containing only plain text.  The file may be "
"included using the ``literalinclude`` directive. [1]_ For example, to "
"include the Python source file :file:`example.py`, use::"
msgstr ""

#: ../../documenting.rst:902
msgid ""
"The file name is relative to the current file's path.  Documentation-"
"specific include files should be placed in the ``Doc/includes`` "
"subdirectory."
msgstr ""

#: ../../documenting.rst:910
msgid ""
"As said before, Sphinx uses interpreted text roles to insert semantic "
"markup in documents."
msgstr ""

#: ../../documenting.rst:913
msgid ""
"Names of local variables, such as function/method arguments, are an "
"exception, they should be marked simply with ``*var*``."
msgstr ""

#: ../../documenting.rst:916
msgid "For all other roles, you have to write ``:rolename:`content```."
msgstr ""

#: ../../documenting.rst:918
msgid ""
"There are some additional facilities that make cross-referencing roles "
"more versatile:"
msgstr ""

#: ../../documenting.rst:921
msgid ""
"You may supply an explicit title and reference target, like in reST "
"direct hyperlinks: ``:role:`title <target>``` will refer to *target*, but"
" the link text will be *title*."
msgstr ""

#: ../../documenting.rst:925
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be "
"created."
msgstr ""

#: ../../documenting.rst:927
msgid ""
"For the Python object roles, if you prefix the content with ``~``, the "
"link text will only be the last component of the target.  For example, "
"``:meth:`~Queue.Queue.get``` will refer to ``Queue.Queue.get`` but only "
"display ``get`` as the link text."
msgstr ""

#: ../../documenting.rst:932
msgid ""
"In HTML output, the link's ``title`` attribute (that is e.g. shown as a "
"tool-tip on mouse-hover) will always be the full target name."
msgstr ""

#: ../../documenting.rst:935
msgid ""
"The following roles refer to objects in modules and are possibly "
"hyperlinked if a matching identifier is found:"
msgstr ""

#: ../../documenting.rst:940
msgid ""
"The name of a module; a dotted name may be used.  This should also be "
"used for package names."
msgstr ""

#: ../../documenting.rst:945
msgid ""
"The name of a Python function; dotted names may be used.  The role text "
"should not include trailing parentheses to enhance readability.  The "
"parentheses are stripped when searching for identifiers."
msgstr ""

#: ../../documenting.rst:951
msgid "The name of a module-level variable or constant."
msgstr ""

#: ../../documenting.rst:955
msgid ""
"The name of a \"defined\" constant.  This may be a C-language ``#define``"
" or a Python variable that is not intended to be changed."
msgstr ""

#: ../../documenting.rst:960
msgid "A class name; a dotted name may be used."
msgstr ""

#: ../../documenting.rst:964
msgid ""
"The name of a method of an object.  The role text should include the type"
" name and the method name.  A dotted name may be used."
msgstr ""

#: ../../documenting.rst:969
msgid "The name of a data attribute of an object."
msgstr ""

#: ../../documenting.rst:973
msgid "The name of an exception. A dotted name may be used."
msgstr ""

#: ../../documenting.rst:975
msgid ""
"The name enclosed in this markup can include a module name and/or a class"
" name. For example, ``:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name."
"  In contrast, ``:func:`foo.filter``` clearly refers to the ``filter`` "
"function in the ``foo`` module."
msgstr ""

#: ../../documenting.rst:981
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the"
" current module and class name (if any) prepended.  If you prefix the "
"name with a dot, this order is reversed.  For example, in the "
"documentation of the :mod:`codecs` module, ``:func:`open``` always refers"
" to the built-in function, while ``:func:`.open``` refers to "
":func:`codecs.open`."
msgstr ""

#: ../../documenting.rst:988
msgid ""
"A similar heuristic is used to determine whether the name is an attribute"
" of the currently documented class."
msgstr ""

#: ../../documenting.rst:993
msgid ""
"The following roles create cross-references to C-language constructs if "
"they are defined in the API documentation:"
msgstr ""

#: ../../documenting.rst:998
msgid "The name of a C-language variable."
msgstr ""

#: ../../documenting.rst:1002
msgid "The name of a C-language function. Should include trailing parentheses."
msgstr ""

#: ../../documenting.rst:1006
msgid "The name of a \"simple\" C macro, as defined above."
msgstr ""

#: ../../documenting.rst:1010
msgid "The name of a C-language type."
msgstr ""

#: ../../documenting.rst:1014
msgid "The name of a C type member, as defined above."
msgstr ""

#: ../../documenting.rst:1018
msgid ""
"The following roles do not refer to objects, but can create cross-"
"references or internal links:"
msgstr ""

#: ../../documenting.rst:1023
msgid "An environment variable.  Index entries are generated."
msgstr ""

#: ../../documenting.rst:1027
msgid ""
"The name of a Python keyword.  Using this role will generate a link to "
"the documentation of the keyword.  ``True``, ``False`` and ``None`` do "
"not use this role, but simple code markup (````True````), given that "
"they're fundamental to the language and should be known to any "
"programmer."
msgstr ""

#: ../../documenting.rst:1034
msgid ""
"A command-line option of Python.  The leading hyphen(s) must be included."
" If a matching ``cmdoption`` directive exists, it is linked to.  For "
"options of other programs or scripts, use simple ````code```` markup."
msgstr ""

#: ../../documenting.rst:1040
msgid ""
"The name of a grammar token (used in the reference manual to create links"
" between production displays)."
msgstr ""

#: ../../documenting.rst:1045
msgid "The following role creates a cross-reference to the term in the glossary:"
msgstr ""

#: ../../documenting.rst:1049
msgid ""
"Reference to a term in the glossary.  The glossary is created using the "
"``glossary`` directive containing a definition list with terms and "
"definitions.  It does not have to be in the same file as the ``term`` "
"markup, in fact, by default the Python docs have one global glossary in "
"the ``glossary.rst`` file."
msgstr ""

#: ../../documenting.rst:1055
msgid ""
"If you use a term that's not explained in a glossary, you'll get a "
"warning during build."
msgstr ""

#: ../../documenting.rst:1060
msgid ""
"The following roles don't do anything special except formatting the text "
"in a different style:"
msgstr ""

#: ../../documenting.rst:1065
msgid "The name of an OS-level command, such as ``rm``."
msgstr ""

#: ../../documenting.rst:1069
msgid ""
"Mark the defining instance of a term in the text.  (No index entries are "
"generated.)"
msgstr ""

#: ../../documenting.rst:1074
msgid ""
"The name of a file or directory.  Within the contents, you can use curly "
"braces to indicate a \"variable\" part, for example::"
msgstr ""

#: ../../documenting.rst:1079
msgid ""
"In the built documentation, the ``x`` will be displayed differently to "
"indicate that it is to be replaced by the Python minor version."
msgstr ""

#: ../../documenting.rst:1084
msgid ""
"Labels presented as part of an interactive user interface should be "
"marked using ``guilabel``.  This includes labels from text-based "
"interfaces such as those created using :mod:`curses` or other text-based "
"libraries.  Any label used in the interface should be marked with this "
"role, including button labels, window titles, field names, menu and menu "
"selection names, and even values in selection lists."
msgstr ""

#: ../../documenting.rst:1093
msgid ""
"Mark a sequence of keystrokes.  What form the key sequence takes may "
"depend on platform- or application-specific conventions.  When there are "
"no relevant conventions, the names of modifier keys should be spelled "
"out, to improve accessibility for new users and non-native speakers.  For"
" example, an *xemacs* key sequence may be marked like ``:kbd:`C-x C-f```,"
" but without reference to a specific application or platform, the same "
"sequence should be marked as ``:kbd:`Control-x Control-f```."
msgstr ""

#: ../../documenting.rst:1103
msgid ""
"The name of an RFC 822-style mail header.  This markup does not imply "
"that the header is being used in an email message, but can be used to "
"refer to any header of the same \"style.\"  This is also used for headers"
" defined by the various MIME specifications.  The header name should be "
"entered in the same way it would normally be found in practice, with the "
"camel-casing conventions being preferred where there is more than one "
"common usage. For example: ``:mailheader:`Content-Type```."
msgstr ""

#: ../../documenting.rst:1113
msgid "The name of a :command:`make` variable."
msgstr ""

#: ../../documenting.rst:1117
msgid ""
"A reference to a Unix manual page including the section, e.g. "
"``:manpage:`ls(1)```."
msgstr ""

#: ../../documenting.rst:1122
msgid ""
"Menu selections should be marked using the ``menuselection`` role.  This "
"is used to mark a complete sequence of menu selections, including "
"selecting submenus and choosing a specific operation, or any subsequence "
"of such a sequence.  The names of individual selections should be "
"separated by ``-->``."
msgstr ""

#: ../../documenting.rst:1128
msgid "For example, to mark the selection \"Start > Programs\", use this markup::"
msgstr ""

#: ../../documenting.rst:1132
msgid ""
"When including a selection that includes some trailing indicator, such as"
" the ellipsis some operating systems use to indicate that the command "
"opens a dialog, the indicator should be omitted from the selection name."
msgstr ""

#: ../../documenting.rst:1138
msgid ""
"The name of a MIME type, or a component of a MIME type (the major or "
"minor portion, taken alone)."
msgstr ""

#: ../../documenting.rst:1143
msgid "The name of a Usenet newsgroup."
msgstr ""

#: ../../documenting.rst:1147
msgid ""
"The name of an executable program.  This may differ from the file name "
"for the executable for some platforms.  In particular, the ``.exe`` (or "
"other) extension should be omitted for Windows programs."
msgstr ""

#: ../../documenting.rst:1153
msgid "A regular expression. Quotes should not be included."
msgstr ""

#: ../../documenting.rst:1157
msgid ""
"A piece of literal text, such as code.  Within the contents, you can use "
"curly braces to indicate a \"variable\" part, as in ``:file:``."
msgstr ""

#: ../../documenting.rst:1160
msgid ""
"If you don't need the \"variable part\" indication, use the standard "
"````code```` instead."
msgstr ""

#: ../../documenting.rst:1164
msgid "The following roles generate external links:"
msgstr ""

#: ../../documenting.rst:1168
msgid ""
"A reference to a Python Enhancement Proposal.  This generates appropriate"
" index entries. The text \"PEP *number*\\ \" is generated; in the HTML "
"output, this text is a hyperlink to an online copy of the specified PEP. "
"Such hyperlinks should not be a substitute for properly documenting the "
"language in the manuals."
msgstr ""

#: ../../documenting.rst:1176
msgid ""
"A reference to an Internet Request for Comments.  This generates "
"appropriate index entries. The text \"RFC *number*\\ \" is generated; in "
"the HTML output, this text is a hyperlink to an online copy of the "
"specified RFC."
msgstr ""

#: ../../documenting.rst:1181
msgid ""
"Note that there are no special roles for including hyperlinks as you can "
"use the standard reST markup for that purpose."
msgstr ""

#: ../../documenting.rst:1188
msgid "Cross-linking markup"
msgstr ""

#: ../../documenting.rst:1190
msgid ""
"To support cross-referencing to arbitrary sections in the documentation, "
"the standard reST labels are \"abused\" a bit: Every label must precede a"
" section title; and every label name must be unique throughout the entire"
" documentation source."
msgstr ""

#: ../../documenting.rst:1195
msgid ""
"You can then reference to these sections using the ``:ref:`label-name``` "
"role."
msgstr ""

#: ../../documenting.rst:1197 ../../documenting.rst:1226
#: ../../documenting.rst:1252 ../../documenting.rst:1262
#: ../../documenting.rst:1277 ../../documenting.rst:1289
msgid "Example::"
msgstr ""

#: ../../documenting.rst:1208
msgid "The ``:ref:`` invocation is replaced with the section title."
msgstr ""

#: ../../documenting.rst:1210
msgid ""
"Alternatively, you can reference any label (not just section titles) if "
"you provide the link text ``:ref:`link text <reference-label>```."
msgstr ""

#: ../../documenting.rst:1214
msgid "Paragraph-level markup"
msgstr ""

#: ../../documenting.rst:1216
msgid ""
"These directives create short paragraphs and can be used inside "
"information units as well as normal text:"
msgstr ""

#: ../../documenting.rst:1221
msgid ""
"An especially important bit of information about an API that a user "
"should be aware of when using whatever bit of API the note pertains to.  "
"The content of the directive should be written in complete sentences and "
"include all appropriate punctuation."
msgstr ""

#: ../../documenting.rst:1234
msgid ""
"An important bit of information about an API that a user should be aware "
"of when using whatever bit of API the warning pertains to.  The content "
"of the directive should be written in complete sentences and include all "
"appropriate punctuation.  In the interest of not scaring users away from "
"pages filled with warnings, this directive should only be chosen over "
"``note`` for information regarding the possibility of crashes, data loss,"
" or security implications."
msgstr ""

#: ../../documenting.rst:1244
msgid ""
"This directive documents the version of Python which added the described "
"feature, or a part of it, to the library or C API.  When this applies to "
"an entire module, it should be placed at the top of the module section "
"before any prose."
msgstr ""

#: ../../documenting.rst:1249
msgid ""
"The first argument must be given and is the version in question.  The "
"second argument is optional and can be used to describe the details of "
"the feature."
msgstr ""

#: ../../documenting.rst:1258
msgid ""
"Similar to ``versionadded``, but describes when and what changed in the "
"named feature in some way (new parameters, changed side effects, platform"
" support, etc.).  This one *must* have the second argument (explanation "
"of the change)."
msgstr ""

#: ../../documenting.rst:1267
msgid ""
"Note that there should be no blank line between the directive head and "
"the explanation; this is to make these blocks visually continuous in the "
"markup."
msgstr ""

#: ../../documenting.rst:1272
msgid "Indicates the version from which the described feature is deprecated."
msgstr ""

#: ../../documenting.rst:1274
msgid ""
"There is one required argument: the version from which the feature is "
"deprecated."
msgstr ""

#: ../../documenting.rst:1283
msgid ""
"Like ``deprecated``, but it also indicates in which version the feature "
"is removed."
msgstr ""

#: ../../documenting.rst:1286
msgid ""
"There are two required arguments: the version from which the feature is "
"deprecated, and the version in which the feature is removed."
msgstr ""

#: ../../documenting.rst:1295
msgid ""
"This directive is used to mark CPython-specific information.  Use either "
"with a block content or a single sentence as an argument, i.e. either ::"
msgstr ""

#: ../../documenting.rst:1304
msgid "or ::"
msgstr ""

#: ../../documenting.rst:1308
msgid ""
"\"\\ **CPython implementation detail:**\\ \" is automatically prepended "
"to the content."
msgstr ""

#: ../../documenting.rst:1313
msgid ""
"Many sections include a list of references to module documentation or "
"external documents.  These lists are created using the ``seealso`` "
"directive."
msgstr ""

#: ../../documenting.rst:1316
msgid ""
"The ``seealso`` directive is typically placed in a section just before "
"any sub-sections.  For the HTML output, it is shown boxed off from the "
"main flow of the text."
msgstr ""

#: ../../documenting.rst:1320
msgid ""
"The content of the ``seealso`` directive should be a reST definition "
"list. Example::"
msgstr ""

#: ../../documenting.rst:1333
msgid ""
"This directive creates a paragraph heading that is not used to create a "
"table of contents node.  It is currently used for the \"Footnotes\" "
"caption."
msgstr ""

#: ../../documenting.rst:1338
msgid ""
"This directive creates a centered boldfaced paragraph.  Use it as "
"follows::"
msgstr ""

#: ../../documenting.rst:1346
msgid "Table-of-contents markup"
msgstr ""

#: ../../documenting.rst:1348
msgid ""
"Since reST does not have facilities to interconnect several documents, or"
" split documents into multiple output files, Sphinx uses a custom "
"directive to add relations between the single files the documentation is "
"made of, as well as tables of contents.  The ``toctree`` directive is the"
" central element."
msgstr ""

#: ../../documenting.rst:1355
msgid ""
"This directive inserts a \"TOC tree\" at the current location, using the "
"individual TOCs (including \"sub-TOC trees\") of the files given in the "
"directive body.  A numeric ``maxdepth`` option may be given to indicate "
"the depth of the tree; by default, all levels are included."
msgstr ""

#: ../../documenting.rst:1360
msgid "Consider this example (taken from the library reference index)::"
msgstr ""

#: ../../documenting.rst:1371
msgid "This accomplishes two things:"
msgstr ""

#: ../../documenting.rst:1373
msgid ""
"Tables of contents from all those files are inserted, with a maximum "
"depth of two, that means one nested heading.  ``toctree`` directives in "
"those files are also taken into account."
msgstr ""

#: ../../documenting.rst:1376
msgid ""
"Sphinx knows that the relative order of the files ``intro``, ``strings`` "
"and so forth, and it knows that they are children of the shown file, the "
"library index.  From this information it generates \"next chapter\", "
"\"previous chapter\" and \"parent chapter\" links."
msgstr ""

#: ../../documenting.rst:1381
msgid ""
"In the end, all files included in the build process must occur in one "
"``toctree`` directive; Sphinx will emit a warning if it finds a file that"
" is not included, because that means that this file will not be reachable"
" through standard navigation."
msgstr ""

#: ../../documenting.rst:1386
msgid ""
"The special file ``contents.rst`` at the root of the source directory is "
"the \"root\" of the TOC tree hierarchy; from it the \"Contents\" page is "
"generated."
msgstr ""

#: ../../documenting.rst:1391
msgid "Index-generating markup"
msgstr ""

#: ../../documenting.rst:1393
msgid ""
"Sphinx automatically creates index entries from all information units "
"(like functions, classes or attributes) like discussed before."
msgstr ""

#: ../../documenting.rst:1396
msgid ""
"However, there is also an explicit directive available, to make the index"
" more comprehensive and enable index entries in documents where "
"information is not mainly contained in information units, such as the "
"language reference."
msgstr ""

#: ../../documenting.rst:1400
msgid ""
"The directive is ``index`` and contains one or more index entries.  Each "
"entry consists of a type and a value, separated by a colon."
msgstr ""

#: ../../documenting.rst:1403
msgid "For example::"
msgstr ""

#: ../../documenting.rst:1411
msgid ""
"This directive contains five entries, which will be converted to entries "
"in the generated index which link to the exact location of the index "
"statement (or, in case of offline media, the corresponding page number)."
msgstr ""

#: ../../documenting.rst:1415
msgid "The possible entry types are:"
msgstr ""

#: ../../documenting.rst:1419
msgid "single"
msgstr ""

#: ../../documenting.rst:1418
msgid ""
"Creates a single index entry.  Can be made a subentry by separating the "
"subentry text with a semicolon (this notation is also used below to "
"describe what entries are created)."
msgstr ""

#: ../../documenting.rst:1422
msgid "pair"
msgstr ""

#: ../../documenting.rst:1422
msgid ""
"``pair: loop; statement`` is a shortcut that creates two index entries, "
"namely ``loop; statement`` and ``statement; loop``."
msgstr ""

#: ../../documenting.rst:1426
msgid "triple"
msgstr ""

#: ../../documenting.rst:1425
msgid ""
"Likewise, ``triple: module; search; path`` is a shortcut that creates "
"three index entries, which are ``module; search path``, ``search; path, "
"module`` and ``path; module search``."
msgstr ""

#: ../../documenting.rst:1432
msgid "module, keyword, operator, object, exception, statement, builtin"
msgstr ""

#: ../../documenting.rst:1429
msgid ""
"These all create two index entries.  For example, ``module: hashlib`` "
"creates the entries ``module; hashlib`` and ``hashlib; module``.  The "
"builtin entry type is slightly different in that \"built-in function\" is"
" used in place of \"builtin\" when creating the two entries."
msgstr ""

#: ../../documenting.rst:1434
msgid ""
"For index directives containing only \"single\" entries, there is a "
"shorthand notation::"
msgstr ""

#: ../../documenting.rst:1439
msgid "This creates four index entries."
msgstr ""

#: ../../documenting.rst:1443
msgid "Grammar production displays"
msgstr ""

#: ../../documenting.rst:1445
msgid ""
"Special markup is available for displaying the productions of a formal "
"grammar. The markup is simple and does not attempt to model all aspects "
"of BNF (or any derived forms), but provides enough to allow context-free "
"grammars to be displayed in a way that causes uses of a symbol to be "
"rendered as hyperlinks to the definition of the symbol.  There is this "
"directive:"
msgstr ""

#: ../../documenting.rst:1453
msgid ""
"This directive is used to enclose a group of productions.  Each "
"production is given on a single line and consists of a name, separated by"
" a colon from the following definition.  If the definition spans multiple"
" lines, each continuation line must begin with a colon placed at the same"
" column as in the first line."
msgstr ""

#: ../../documenting.rst:1459
msgid "Blank lines are not allowed within ``productionlist`` directive arguments."
msgstr ""

#: ../../documenting.rst:1461
msgid ""
"The definition can contain token names which are marked as interpreted "
"text (e.g. ``unaryneg ::= \"-\" `integer```) -- this generates cross-"
"references to the productions of these tokens."
msgstr ""

#: ../../documenting.rst:1465
msgid ""
"Note that no further reST parsing is done in the production, so that you "
"don't have to escape ``*`` or ``|`` characters."
msgstr ""

#: ../../documenting.rst:1471
msgid "The following is an example taken from the Python Reference Manual::"
msgstr ""

#: ../../documenting.rst:1484
msgid "Substitutions"
msgstr ""

#: ../../documenting.rst:1486
msgid ""
"The documentation system provides three substitutions that are defined by"
" default. They are set in the build configuration file :file:`conf.py`."
msgstr ""

#: ../../documenting.rst:1491
msgid ""
"Replaced by the Python release the documentation refers to.  This is the "
"full version string including alpha/beta/release candidate tags, e.g. "
"``2.5.2b3``."
msgstr ""

#: ../../documenting.rst:1496
msgid ""
"Replaced by the Python version the documentation refers to. This consists"
" only of the major and minor version parts, e.g. ``2.5``, even for "
"version 2.5.1."
msgstr ""

#: ../../documenting.rst:1502
msgid ""
"Replaced by either today's date, or the date set in the build "
"configuration file.  Normally has the format ``April 14, 2007``."
msgstr ""

#: ../../documenting.rst:1508
msgid ""
"There is a standard ``include`` directive, but it raises errors if the "
"file is not found.  This one only emits a warning."
msgstr ""

#: ../../documenting.rst:1515
msgid "Building the documentation"
msgstr ""

#: ../../documenting.rst:1519
msgid ""
"The toolset used to build the docs is written in Python and is called "
"Sphinx_. Sphinx is maintained separately and is not included in this "
"tree.  Also needed are blurb_, a tool to create :file:`Misc/NEWS` on "
"demand; and python-docs-theme_, the Sphinx theme for the Python "
"documentation."
msgstr ""

#: ../../documenting.rst:1524
msgid ""
"To build the documentation, follow the instructions from one of the "
"sections below.  You can view the documentation after building the HTML "
"by pointing a browser at the file :file:`Doc/build/html/index.html`."
msgstr ""

#: ../../documenting.rst:1528
msgid ""
"You are expected to have installed the latest stable version of Sphinx_ "
"and blurb_ on your system or in a virtualenv_ (which can be created using"
" ``make venv``), so that the Makefile can find the ``sphinx-build`` "
"command.  You can also specify the location of ``sphinx-build`` with the "
"``SPHINXBUILD`` :command:`make` variable."
msgstr ""

#: ../../documenting.rst:1538
msgid "Using make / make.bat"
msgstr ""

#: ../../documenting.rst:1540
msgid ""
"**On Unix**, run the following from the root of your :ref:`repository "
"clone <checkout>` to build the output as HTML::"
msgstr ""

#: ../../documenting.rst:1547
msgid "or alternatively ``make -C Doc/ venv html``."
msgstr ""

#: ../../documenting.rst:1549
msgid ""
"You can also use ``make help`` to see a list of targets supported by "
":command:`make`.  Note that ``make check`` is automatically run when you "
"submit a :doc:`pull request <pullrequest>`, so you should make sure that "
"it runs without errors."
msgstr ""

#: ../../documenting.rst:1554
msgid ""
"**On Windows**, a :file:`make.bat` batchfile tries to emulate "
":command:`make` as closely as possible, but the venv target is not "
"implemented, so you will probably want to make sure you are working in a "
"virtual environment before proceeding, otherwise all dependencies will be"
" automatically installed on your system."
msgstr ""

#: ../../documenting.rst:1560
msgid ""
"When ready, run the following from the root of your :ref:`repository "
"clone <checkout>` to build the output as HTML::"
msgstr ""

#: ../../documenting.rst:1566
msgid ""
"You can also use ``make help`` to see a list of targets supported by "
":file:`make.bat`."
msgstr ""

#: ../../documenting.rst:1569
msgid "See also :file:`Doc/README.rst` for more information."
msgstr ""

#: ../../documenting.rst:1572
msgid "Using sphinx-build"
msgstr ""

#: ../../documenting.rst:1574
msgid ""
"Sometimes we directly want to execute the sphinx-build tool instead of "
"through `make` (although the latter is still the preferred way). In this "
"case, you can use the following command line from the `Doc` directory "
"(make sure to install Sphinx_, blurb_ and python-docs-theme_ packages "
"from PyPI)::"
msgstr ""

#: ../../documenting.rst:1581
msgid ""
"where ``<builder>`` is one of html, text, latex, or htmlhelp (for "
"explanations see the make targets above)."
msgstr ""

#: ../../documenting.rst:1587
msgid "Translating"
msgstr ""

#: ../../documenting.rst:1589
msgid ""
"Python documentation translations are governed by the :PEP:`545`, they "
"are built by `docsbuild-scripts <https://github.com/python/docsbuild-"
"scripts/>`__ and hosted on docs.python.org. There are several "
"documentation translations already in production, other are work in "
"progress:"
msgstr ""

#: ../../documenting.rst:1596
msgid "Language"
msgstr ""

#: ../../documenting.rst:1596
msgid "Contact"
msgstr ""

#: ../../documenting.rst:1596
msgid "Links"
msgstr ""

#: ../../documenting.rst:1598
msgid "Arabic (ar)"
msgstr ""

#: ../../documenting.rst:1598
msgid "`Abdur-Rahmaan Janhangeer <bpo_osdotsystem_>`_"
msgstr ""

#: ../../documenting.rst:1598
msgid "`GitHub <github_ar_>`_"
msgstr ""

#: ../../documenting.rst:1601
msgid "Bengali as spoken in India (bn_IN)"
msgstr ""

#: ../../documenting.rst:1601
msgid "`Kushal Das <bpo_kushal_>`_"
msgstr ""

#: ../../documenting.rst:1601
msgid "`GitHub <github_bn_in_>`_"
msgstr ""

#: ../../documenting.rst:1605
msgid "French (fr)"
msgstr ""

#: ../../documenting.rst:1605
msgid "`Julien Palard (mdk) <bpo_mdk_>`_"
msgstr ""

#: ../../documenting.rst:1605
msgid "`GitHub <github_fr_>`_"
msgstr ""

#: ../../documenting.rst:1608
msgid "Hindi as spoken in india (hi_IN)"
msgstr ""

#: ../../documenting.rst:1608
msgid "`GitHub <github_hi_in_>`_"
msgstr ""

#: ../../documenting.rst:1611
msgid "Hungarian (hu)"
msgstr ""

#: ../../documenting.rst:1611
msgid "`Tamás Bajusz (gbtami) <bpo_gbtami_>`_"
msgstr ""

#: ../../documenting.rst:1611
msgid "`GitHub <github_hu_>`_ `Mailing List <list_hu_>`_"
msgstr ""

#: ../../documenting.rst:1614
msgid "Indonesian (id)"
msgstr ""

#: ../../documenting.rst:1614
msgid "`Oon Arfiandwi <bpo_oonid_>`_"
msgstr ""

#: ../../documenting.rst:1614
msgid "`GitHub <github_id_>`_"
msgstr ""

#: ../../documenting.rst:1616
msgid "Italian (it)"
msgstr ""

#: ../../documenting.rst:1616
msgid "`mail <mail_it_>`_"
msgstr ""

#: ../../documenting.rst:1618
msgid "Japanese (ja)"
msgstr ""

#: ../../documenting.rst:1618
msgid "`Kinebuchi Tomohiko (cocoatomo) <bpo_cocoatomo_>`_"
msgstr ""

#: ../../documenting.rst:1618
msgid "`GitHub <github_ja_>`_ `Doc <doc_ja_>`_"
msgstr ""

#: ../../documenting.rst:1621
msgid "Korean (ko)"
msgstr ""

#: ../../documenting.rst:1621
msgid "`GitHub <github_ko_>`_ `Doc <doc_ko_>`_"
msgstr ""

#: ../../documenting.rst:1624
msgid "Lithuanian (lt)"
msgstr ""

#: ../../documenting.rst:1624
msgid "`mail <mail_lt_>`_"
msgstr ""

#: ../../documenting.rst:1626
msgid "Polish (pl)"
msgstr ""

#: ../../documenting.rst:1626
msgid "`GitHub <github_pl_>`_ `Translations <tx_pl_>`_ `Doc <doc_pl_>`_"
msgstr ""

#: ../../documenting.rst:1630
msgid "Portuguese (pt)"
msgstr ""

#: ../../documenting.rst:1630
msgid "Gustavo Toffo"
msgstr ""

#: ../../documenting.rst:1632
msgid "Portuguese as spoken in Brasil (pt-br)"
msgstr ""

#: ../../documenting.rst:1632
msgid "Marco Rougeth"
msgstr ""

#: ../../documenting.rst:1632
msgid ""
"`GitHub <github_pt_br_>`_ `Wiki <wiki_pt_br_>`_ `Telegram <chat_pt_br_>`_"
" `article <article_pt_br_>`_"
msgstr ""

#: ../../documenting.rst:1637
msgid "Russian (ru)"
msgstr ""

#: ../../documenting.rst:1637
msgid "`mail <mail_ru_>`_"
msgstr ""

#: ../../documenting.rst:1639
msgid "Simplified Chinese (zh-cn)"
msgstr ""

#: ../../documenting.rst:1639
msgid "`Shengjing Zhu <bpo_zhsj_>`_"
msgstr ""

#: ../../documenting.rst:1639
msgid "`Transifex <tx_zh_cn_>`_ `GitHub <github_zh_cn_>`_ `Doc <doc_zh_cn_>`_"
msgstr ""

#: ../../documenting.rst:1643
msgid "Spanish (es)"
msgstr ""

#: ../../documenting.rst:1643
msgid "Raúl Cumplido"
msgstr ""

#: ../../documenting.rst:1643
msgid "`GitHub <github_es_>`_"
msgstr ""

#: ../../documenting.rst:1645
msgid "Traditional Chinese (zh-tw)"
msgstr ""

#: ../../documenting.rst:1645
msgid "`王威翔 Matt Wang <bpo_mattwang44_>`_, Josix Wang"
msgstr ""

#: ../../documenting.rst:1645
msgid "`GitHub <github_zh_tw_>`_ `Transifex <tx_zh_tw_>`_ `Doc <doc_zh_tw_>`_"
msgstr ""

#: ../../documenting.rst:1649
msgid "Turkish (tr)"
msgstr ""

#: ../../documenting.rst:1649
msgid "`GitHub <github_tr_>`_"
msgstr ""

#: ../../documenting.rst:1691
msgid "Starting a new translation"
msgstr ""

#: ../../documenting.rst:1693
msgid ""
"First subscribe to the `doc-sig <https://mail.python.org/mailman/listinfo"
"/doc-sig>`_ mailing list, and introduce yourself and the translation "
"you're starting."
msgstr ""

#: ../../documenting.rst:1697
msgid ""
"Then you can bootstrap your new translation by using our `cookiecutter "
"<https://github.com/JulienPalard/python-docs-cookiecutter>`__."
msgstr ""

#: ../../documenting.rst:1700
msgid "The important steps looks like this:"
msgstr ""

#: ../../documenting.rst:1702
msgid ""
"Create the github repo (anywhere), with the right hierarchy (using the "
"cookiecutter)."
msgstr ""

#: ../../documenting.rst:1704
msgid "Gather people to help you translating, you can't do it alone."
msgstr ""

#: ../../documenting.rst:1705
msgid ""
"You can use any tool to translate, as long as you can synchronize with "
"git. Some are using Transifex, some are using only github, or you can "
"choose another way, it's up to you."
msgstr ""

#: ../../documenting.rst:1708
msgid ""
"Ensure we updated this page to reflect your work and progress, either via"
" a PR, or by asking on the doc-sig mailing list."
msgstr ""

#: ../../documenting.rst:1710
msgid ""
"When ``tutorial/``, ``bugs.py`` and ``library/functions`` are complete, "
"ask on doc-sig for your language to be added in the language picker on "
"docs.python.org."
msgstr ""

#: ../../documenting.rst:1716
msgid "PEP 545 summary:"
msgstr ""

#: ../../documenting.rst:1718
msgid "Here are the essential points of :PEP:`545`:"
msgstr ""

#: ../../documenting.rst:1720
msgid ""
"Each translation is assigned an appropriate lowercased language tag, with"
" an optional region subtag, joined with a dash, like ``pt-br`` or ``fr``."
msgstr ""

#: ../../documenting.rst:1724
msgid ""
"Each translation is under CC0 and marked as so in the README (as in the "
"cookiecutter)."
msgstr ""

#: ../../documenting.rst:1727
msgid ""
"Translations files are hosted on ``https://github.com/python/python-"
"docs-{LANGUAGE_TAG}`` (not mandatory to start a translation, but "
"mandatory to land on ``docs.python.org``)."
msgstr ""

#: ../../documenting.rst:1732
msgid ""
"Translations having completed ``tutorial/``, ``library/stdtypes`` and "
"``library/functions`` are hosted on "
"``https://docs.python.org/{LANGUAGE_TAG}/{VERSION_TAG}/``."
msgstr ""

#: ../../documenting.rst:1738
msgid "How to get help"
msgstr ""

#: ../../documenting.rst:1740
msgid ""
"Discussions about translations occur on the `doc-sig "
"<https://mail.python.org/mailman/listinfo/doc-sig>`_ mailing list, and "
"there's a `Libera.Chat IRC <https://libera.chat/>`_ channel, ``#python-"
"doc``."
msgstr ""

#: ../../documenting.rst:1747
msgid "Translation FAQ"
msgstr ""

#: ../../documenting.rst:1750
msgid "Which version of Python documentation should be translated?"
msgstr ""

#: ../../documenting.rst:1752
msgid ""
"Consensus is to work on current stable, you can then propagate your "
"translation from a branch to another using `pomerge "
"<https://pypi.org/p/pomerge>`__."
msgstr ""

#: ../../documenting.rst:1758
msgid "Are there some tools to help in managing the repo?"
msgstr ""

#: ../../documenting.rst:1760
msgid "Here's what's we're using:"
msgstr ""

#: ../../documenting.rst:1762
msgid ""
"`pomerge <https://pypi.org/p/pomerge>`__ to propagate translation from a "
"files to others."
msgstr ""

#: ../../documenting.rst:1764
msgid "`pospell <https://pypi.org/p/pospell>`__ to check for typo in po files."
msgstr ""

#: ../../documenting.rst:1765
msgid ""
"`powrap <https://pypi.org/p/powrap>`__ to rewrap the ``.po`` files before"
" committing, this helps keeping git diffs short."
msgstr ""

#: ../../documenting.rst:1767
msgid ""
"`potodo <https://pypi.org/p/potodo>`__ to list what needs to be "
"translated."
msgstr ""

#: ../../documenting.rst:1772
msgid "How a coordinator is elected?"
msgstr ""

#: ../../documenting.rst:1774
msgid ""
"There is no election, each translation have to sort this out.  Here are "
"some suggestions."
msgstr ""

#: ../../documenting.rst:1776
msgid "Coordinator requests are to be public on doc-sig mailing list."
msgstr ""

#: ../../documenting.rst:1777
msgid ""
"If the given language have a native core dev, the core dev have its word "
"on the choice."
msgstr ""

#: ../../documenting.rst:1779
msgid ""
"Anyone who wants to become coordinator for its native language, and shows"
" motivation by translating and building a community, will be named "
"coordinator."
msgstr ""

#: ../../documenting.rst:1782
msgid ""
"In case of concurrency between two persons, no one will sort this out for"
" you.  It is up to you two to organize a local election or whatever "
"needed to sort this out."
msgstr ""

#: ../../documenting.rst:1785
msgid ""
"In case a coordinator become inactive or unreachable for a long period of"
" time, someone else can ask for a takeover on doc-sig."
msgstr ""

#: ../../documenting.rst:1790
msgid "The entry for my translation is missing/not up to date on this page"
msgstr ""

#: ../../documenting.rst:1792
msgid ""
"Ask on doc-sig, or better, make a PR on the `devguide "
"<https://github.com/python/devguide/>`__."
msgstr ""

#: ../../documenting.rst:1797
msgid "I have a translation, but not on git, what should I do?"
msgstr ""

#: ../../documenting.rst:1799
msgid ""
"You can ask for help on the doc-sig mailing list, and the team will help "
"you create an appropriate repository. You can still use tools like "
"transifex, if you like."
msgstr ""

#: ../../documenting.rst:1805
msgid "My git hierarchy does not match yours, can I keep it?"
msgstr ""

#: ../../documenting.rst:1807
msgid ""
"No, inside the ``github.com/python`` organization we’ll all have the "
"exact same hierarchy so bots will be able to build all of our "
"translations. So you may have to convert from one hierarchy to another. "
"Ask for help on the doc-sig mailing list if you’re not sure on how to do "
"it."
msgstr ""

#: ../../documenting.rst:1814
msgid "What hierarchy should I use in my github repository?"
msgstr ""

#: ../../documenting.rst:1816
msgid ""
"As for every project, we have a *branch* per version.  We store ``po`` "
"files in the root of the repository using the ``gettext_compact=0`` "
"style."
msgstr ""

