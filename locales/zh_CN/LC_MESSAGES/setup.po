# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 09:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../setup.rst:5
msgid "Getting Started"
msgstr ""

#: ../../setup.rst:9
msgid ""
"These instructions cover how to get a working copy of the source code and"
" a compiled version of the CPython interpreter (CPython is the version of"
" Python available from https://www.python.org/). It also gives an "
"overview of the directory structure of the CPython source code."
msgstr ""

#: ../../setup.rst:14
msgid ""
"Alternatively, if you have `Docker <https://www.docker.com/>`_ installed "
"you might want to use `our official images <https://gitlab.com/python-"
"devs/ci-images/blob/master/README.md>`_.  These contain the latest "
"releases of several Python versions, along with git head, and are "
"provided for development and testing purposes only."
msgstr ""

#: ../../setup.rst:22
msgid ""
"The :ref:`quick-reference` gives brief summary of the process from "
"installing git to submitting a pull request."
msgstr ""

#: ../../setup.rst:28
msgid "Install ``git``"
msgstr ""

#: ../../setup.rst:30
msgid ""
"CPython is developed using `git <https://git-scm.com>`_ for version "
"control. The git command line program is named ``git``; this is also used"
" to refer to git itself. git is easily available for all common operating"
" systems."
msgstr ""

#: ../../setup.rst:34
msgid "**Install**"
msgstr ""

#: ../../setup.rst:36
msgid ""
"As the CPython repo is hosted on GitHub, please refer to either the "
"`GitHub setup instructions <https://help.github.com/articles/set-up-"
"git/>`_ or the `git project instructions <https://git-scm.com>`_ for "
"step-by-step installation directions. You may also want to consider a "
"graphical client such as `TortoiseGit <https://tortoisegit.org/>`_ or "
"`GitHub Desktop <https://desktop.github.com/>`_."
msgstr ""

#: ../../setup.rst:43
msgid "**Configure**"
msgstr ""

#: ../../setup.rst:45
msgid ""
"Configure :ref:`your name and email <set-up-name-email>` and create `an "
"SSH key <https://help.github.com/articles/adding-a-new-ssh-key-to-your-"
"github-account/>`_ as this will allow you to interact with GitHub without"
" typing a username and password each time you execute a command, such as "
"``git pull``, ``git push``, or ``git fetch``.  On Windows, you should "
"also :ref:`enable autocrlf <autocrlf>`."
msgstr ""

#: ../../setup.rst:56
msgid "Get the source code"
msgstr ""

#: ../../setup.rst:58
msgid ""
"The CPython repo is hosted on GitHub. To get a copy of the source code "
"you should :ref:`fork the Python repository on GitHub <fork-cpython>`, "
":ref:`create a local clone of your personal fork, and configure the "
"remotes <clone-your-fork>`."
msgstr ""

#: ../../setup.rst:62
msgid "You will only need to execute these steps once:"
msgstr ""

#: ../../setup.rst:64
msgid "Go to https://github.com/python/cpython."
msgstr ""

#: ../../setup.rst:66
msgid "Press :guilabel:`Fork` on the top right."
msgstr ""

#: ../../setup.rst:68
msgid ""
"When asked where to fork the repository, choose to fork it to your "
"username."
msgstr ""

#: ../../setup.rst:70
msgid ""
"Your fork will be created at "
":samp:`https://github.com/{<username>}/cpython`."
msgstr ""

#: ../../setup.rst:72
msgid "Clone your GitHub fork (replace ``<username>`` with your username)::"
msgstr ""

#: ../../setup.rst:76
msgid "(You can use both SSH-based or HTTPS-based URLs.)"
msgstr ""

#: ../../setup.rst:78
msgid "Configure an ``upstream`` remote::"
msgstr ""

#: ../../setup.rst:83
msgid "Verify that your setup is correct::"
msgstr ""

#: ../../setup.rst:91
msgid ""
"If you did everything correctly, you should now have a copy of the code "
"in the ``cpython`` directory and two remotes that refer to your own "
"GitHub fork (``origin``) and the official CPython repository "
"(``upstream``)."
msgstr ""

#: ../../setup.rst:97
msgid ""
"If you want a working copy of an already-released version of Python, "
"i.e., a version in :ref:`maintenance mode <maintbranch>`, you can "
"checkout a release branch. For instance, to checkout a working copy of "
"Python 3.8, do ``git checkout 3.8``."
msgstr ""

#: ../../setup.rst:102
msgid "You will need to re-compile CPython when you do such an update."
msgstr ""

#: ../../setup.rst:104
msgid ""
"Do note that CPython will notice that it is being run from a working "
"copy. This means that if you edit CPython's source code in your working "
"copy, changes to Python code will be picked up by the interpreter for "
"immediate use and testing.  (If you change C code, you will need to "
"recompile the affected files as described below.)"
msgstr ""

#: ../../setup.rst:110
msgid ""
"Patches for the documentation can be made from the same repository; see "
":ref:`documenting`."
msgstr ""

#: ../../setup.rst:117
msgid "Compile and build"
msgstr ""

#: ../../setup.rst:119
msgid ""
"CPython provides several compilation flags which help with debugging "
"various things. While all of the known flags can be found in the "
"``Misc/SpecialBuilds.txt`` file, the most critical one is the "
"``Py_DEBUG`` flag which creates what is known as a \"pydebug\" build. "
"This flag turns on various extra sanity checks which help catch common "
"issues. The use of the flag is so common that turning on the flag is a "
"basic compile option."
msgstr ""

#: ../../setup.rst:126
msgid ""
"You should always develop under a pydebug build of CPython (the only "
"instance of when you shouldn't is if you are taking performance "
"measurements). Even when working only on pure Python code the pydebug "
"build provides several useful checks that one should not skip."
msgstr ""

#: ../../setup.rst:131
msgid ""
"The effects of various configure and build flags are documented in the "
"`Python configure docs "
"<https://docs.python.org/dev/using/configure.html>`_."
msgstr ""

#: ../../setup.rst:137
msgid "UNIX"
msgstr ""

#: ../../setup.rst:139
msgid ""
"The core CPython interpreter only needs a C compiler to be built, "
"however, some of the extension modules will need development headers for "
"additional libraries (such as the ``zlib`` library for compression). "
"Depending on what you intend to work on, you might need to install these "
"additional requirements so that the compiled interpreter supports the "
"desired features."
msgstr ""

#: ../../setup.rst:146
msgid ""
"If you want to install these optional dependencies, consult the :ref"
":`build-dependencies` section below."
msgstr ""

#: ../../setup.rst:149
msgid ""
"If you don't need to install them, the basic steps for building Python "
"for development is to configure it and then compile it."
msgstr ""

#: ../../setup.rst:152
msgid "Configuration is typically:"
msgstr ""

#: ../../setup.rst:158
msgid ""
"More flags are available to ``configure``, but this is the minimum you "
"should do to get a pydebug build of CPython."
msgstr ""

#: ../../setup.rst:162
msgid ""
"You might need to run ``make clean`` before or after re-running "
"``configure`` in a particular build directory."
msgstr ""

#: ../../setup.rst:165
msgid "Once ``configure`` is done, you can then compile CPython with:"
msgstr ""

#: ../../setup.rst:171
msgid ""
"This will build CPython with only warnings and errors being printed to "
"stderr and utilize up to 2 CPU cores. If you are using a multi-core "
"machine with more than 2 cores (or a single-core machine), you can adjust"
" the number passed into the ``-j`` flag to match the number of cores you "
"have (or if your version of Make supports it, you can use ``-j`` without "
"a number and Make will not limit the number of steps that can run "
"simultaneously.)."
msgstr ""

#: ../../setup.rst:178
msgid ""
"At the end of the build you should see a success message, possibly "
"followed by a list of extension modules that haven't been built because "
"their dependencies were missing:"
msgstr ""

#: ../../setup.rst:193
msgid ""
"If the build failed and you are using a C89 or C99-compliant compiler, "
"please `open a bug report <https://bugs.python.org>`_."
msgstr ""

#: ../../setup.rst:196
msgid ""
"If you decide to :ref:`build-dependencies`, you will need to re-run both "
"``configure`` and ``make``."
msgstr ""

#: ../../setup.rst:201
msgid ""
"Once CPython is done building you will then have a working build that can"
" be run in-place; ``./python`` on most machines (and what is used in all "
"examples), ``./python.exe`` wherever a case-insensitive filesystem is "
"used (e.g. on OS X by default), in order to avoid conflicts with the "
"``Python`` directory. There is normally no need to install your built "
"copy of Python! The interpreter will realize where it is being run from "
"and thus use the files found in the working copy.  If you are worried you"
" might accidentally install your working copy build, you can add "
"``--prefix=/tmp/python`` to the configuration step.  When running from "
"your working directory, it is best to avoid using the ``--enable-shared``"
" flag to ``configure``; unless you are very careful, you may accidentally"
" run with code from an older, installed shared Python library rather than"
" from the interpreter you just built."
msgstr ""

#: ../../setup.rst:217
msgid "Clang"
msgstr ""

#: ../../setup.rst:219
msgid ""
"If you are using clang_ to build CPython, some flags you might want to "
"set to quiet some standard warnings which are specifically superfluous to"
" CPython are ``-Wno-unused-value -Wno-empty-body -Qunused-arguments``. "
"You can set your ``CFLAGS`` environment variable to these flags when "
"running ``configure``."
msgstr ""

#: ../../setup.rst:224
msgid ""
"If you are using clang_ with ccache_, turn off the noisy ``parentheses-"
"equality`` warnings with the ``-Wno-parentheses-equality`` flag. These "
"warnings are caused by clang not  having enough information to detect "
"that extraneous parentheses in expanded macros are valid, because the "
"preprocessing is done separately by ccache."
msgstr ""

#: ../../setup.rst:230
msgid ""
"If you are using LLVM 2.8, also use the ``-no-integrated-as`` flag in "
"order to build the :py:mod:`ctypes` module (without the flag the rest of "
"CPython will still build properly)."
msgstr ""

#: ../../setup.rst:238
msgid "Windows"
msgstr ""

#: ../../setup.rst:240
msgid ""
"For a quick guide to building you can read `this documentation`_ from "
"Victor Stinner."
msgstr ""

#: ../../setup.rst:243
msgid ""
"**Python 3.6** and later can use Microsoft Visual Studio 2017.  You can "
"download and use any of the free or paid versions of `Visual Studio "
"2017`_."
msgstr ""

#: ../../setup.rst:246
msgid ""
"When installing Visual Studio 2017, select the **Python development** "
"workload and the optional **Python native development tools** component "
"to obtain all of the necessary build tools. If you do not already have "
"git installed, you can find git for Windows on the **Individual "
"components** tab of the installer."
msgstr ""

#: ../../setup.rst:251
msgid ""
"If you want to build MSI installers, be aware that the build toolchain "
"for them has a dependency on the Microsoft .NET Framework Version 3.5 "
"(which may not be configured on recent versions of Windows, such as "
"Windows 10). If you are building on a recent Windows version, use the "
"Control Panel (Programs | Programs and Features | Turn Windows Features "
"on or off) and ensure that the entry \".NET Framework 3.5 (includes .NET "
"2.0 and 3.0)\" is enabled."
msgstr ""

#: ../../setup.rst:258
msgid ""
"Your first build should use the command line to ensure any external "
"dependencies are downloaded:"
msgstr ""

#: ../../setup.rst:265
msgid ""
"After this build succeeds, you can open the ``PCbuild\\pcbuild.sln`` "
"solution in Visual Studio to continue development."
msgstr ""

#: ../../setup.rst:268
msgid ""
"See the `readme`_ for more details on what other software is necessary "
"and how to build."
msgstr ""

#: ../../setup.rst:271
msgid ""
"If you are using the Windows Subsystem for Linux (WSL), clone the "
"repository from a native Windows terminal program like cmd.exe command "
"prompt or PowerShell as well as use a build of git targeted for Windows, "
"e.g., the official one from `<https://git-scm.com>`_. Otherwise, Visual "
"Studio will not be able to find all the project's files and will fail the"
" build."
msgstr ""

#: ../../setup.rst:284
msgid "Install dependencies"
msgstr ""

#: ../../setup.rst:286
msgid ""
"This section explains how to install additional extensions (e.g. "
"``zlib``) on :ref:`Linux <deps-on-linux>` and :ref:`macOs/OS X <macOS>`."
"  On Windows, extensions are already included and built automatically."
msgstr ""

#: ../../setup.rst:293
msgid "Linux"
msgstr ""

#: ../../setup.rst:295
msgid ""
"For UNIX based systems, we try to use system libraries whenever "
"available. This means optional components will only build if the relevant"
" system headers are available. The best way to obtain the appropriate "
"headers will vary by distribution, but the appropriate commands for some "
"popular distributions are below."
msgstr ""

#: ../../setup.rst:301
msgid ""
"On **Fedora**, **Red Hat Enterprise Linux** and other ``yum`` based "
"systems::"
msgstr ""

#: ../../setup.rst:306
msgid "On **Fedora** and other ``DNF`` based systems::"
msgstr ""

#: ../../setup.rst:311
msgid ""
"On **Debian**, **Ubuntu**, and other ``apt`` based systems, try to get "
"the dependencies for the Python you're working on by using the ``apt`` "
"command."
msgstr ""

#: ../../setup.rst:314
msgid ""
"First, make sure you have enabled the source packages in the sources "
"list. You can do this by adding the location of the source packages, "
"including URL, distribution name and component name, to "
"``/etc/apt/sources.list``. Take Ubuntu Bionic for example::"
msgstr ""

#: ../../setup.rst:321
msgid ""
"For other distributions, like Debian, change the URL and names to "
"correspond with the specific distribution."
msgstr ""

#: ../../setup.rst:324
msgid "Then you should update the packages index::"
msgstr ""

#: ../../setup.rst:328
msgid "Now you can install the build dependencies via ``apt``::"
msgstr ""

#: ../../setup.rst:333
msgid ""
"If you want to build all optional modules, install the following packages"
" and their dependencies::"
msgstr ""

#: ../../setup.rst:345
msgid "macOS and OS X"
msgstr ""

#: ../../setup.rst:347
msgid ""
"For **macOS systems** (versions 10.12+) and **OS X 10.9 and later**, the "
"Developer Tools can be downloaded and installed automatically; you do not"
" need to download the complete Xcode application."
msgstr ""

#: ../../setup.rst:351
msgid "If necessary, run the following::"
msgstr ""

#: ../../setup.rst:355
msgid ""
"This will also ensure that the system header files are installed into "
"``/usr/include``."
msgstr ""

#: ../../setup.rst:358
msgid ""
"On **Mac OS X systems** (versions 10.0 - 10.7) and **OS X 10.8**, use the"
" C compiler and other development utilities provided by Apple's Xcode "
"Developer Tools. The Developer Tools are not shipped with Mac OS X."
msgstr ""

#: ../../setup.rst:362
msgid ""
"For these **older releases (versions 10.0 - 10.8)**, you will need to "
"download either the correct version of the Command Line Tools, if "
"available, or install them from the full Xcode app or package for that OS"
" X release.  Older versions may be available either as a no-cost download"
" through Apple's App Store or from `the Apple Developer web site "
"<https://developer.apple.com/>`_."
msgstr ""

#: ../../setup.rst:372
msgid ""
"Also note that OS X does not include several libraries used by the Python"
" standard library, including ``libzma``, so expect to see some extension "
"module build failures unless you install local copies of them.  As of OS "
"X 10.11, Apple no longer provides header files for the deprecated system "
"version of OpenSSL which means that you will not be able to build the "
"``_ssl`` extension. One solution is to install these libraries from a "
"third-party package manager, like Homebrew_ or MacPorts_, and then add "
"the appropriate paths for the header and library files to your "
"``configure`` command.  For example,"
msgstr ""

#: ../../setup.rst:381
msgid "with **Homebrew**::"
msgstr ""

#: ../../setup.rst:385
msgid "and ``configure`` Python versions >= 3.7::"
msgstr ""

#: ../../setup.rst:389
msgid "or ``configure`` Python versions < 3.7::"
msgstr ""

#: ../../setup.rst:395 ../../setup.rst:409
msgid "and ``make``::"
msgstr ""

#: ../../setup.rst:399
msgid "or **MacPorts**::"
msgstr ""

#: ../../setup.rst:403
msgid "and ``configure``::"
msgstr ""

#: ../../setup.rst:413
msgid ""
"There will sometimes be optional modules added for a new release which "
"won't yet be identified in the OS level build dependencies. In those "
"cases, just ask for assistance on the core-mentorship list."
msgstr ""

#: ../../setup.rst:417
msgid ""
"Explaining how to build optional dependencies on a UNIX based system "
"without root access is beyond the scope of this guide."
msgstr ""

#: ../../setup.rst:423
msgid ""
"While you need a C compiler to build CPython, you don't need any "
"knowledge of the C language to contribute!  Vast areas of CPython are "
"written completely in Python: as of this writing, CPython contains "
"slightly more Python code than C."
msgstr ""

#: ../../setup.rst:432
msgid "Regenerate ``configure``"
msgstr ""

#: ../../setup.rst:434
msgid ""
"If a change is made to Python which relies on some POSIX system-specific "
"functionality (such as using a new system call), it is necessary to "
"update the ``configure`` script to test for availability of the "
"functionality."
msgstr ""

#: ../../setup.rst:438
msgid ""
"Python's ``configure`` script is generated from ``configure.ac`` using "
"Autoconf. Instead of editing ``configure``, edit ``configure.ac`` and "
"then run ``autoreconf`` to regenerate ``configure`` and a number of other"
" files (such as ``pyconfig.h``)."
msgstr ""

#: ../../setup.rst:443
msgid ""
"When submitting a patch with changes made to ``configure.ac``, you should"
" also include the generated files."
msgstr ""

#: ../../setup.rst:446
msgid ""
"Note that running ``autoreconf`` is not the same as running ``autoconf``."
" For example, ``autoconf`` by itself will not regenerate "
"``pyconfig.h.in``. ``autoreconf`` runs ``autoconf`` and a number of other"
" tools repeatedly as is appropriate."
msgstr ""

#: ../../setup.rst:451
msgid ""
"Python's ``configure.ac`` script typically requires a specific version of"
" Autoconf.  At the moment, this reads: ``AC_PREREQ(2.69)``. It also "
"requires to have the ``autoconf-archive`` and ``pkg-config`` utilities "
"installed in the system and the ``pkg.m4`` macro file located in the "
"appropriate ``alocal`` location. You can easily check if this is "
"correctly configured by running:"
msgstr ""

#: ../../setup.rst:461
msgid ""
"If the system copy of Autoconf does not match this version, you will need"
" to install your own copy of Autoconf."
msgstr ""

#: ../../setup.rst:467
msgid "Troubleshoot the build"
msgstr ""

#: ../../setup.rst:469
msgid ""
"This section lists some of the common problems that may arise during the "
"compilation of Python, with proposed solutions."
msgstr ""

#: ../../setup.rst:473
msgid "Avoid recreating auto-generated files"
msgstr ""

#: ../../setup.rst:475
msgid ""
"Under some circumstances you may encounter Python errors in scripts like "
"``Parser/asdl_c.py`` or ``Python/makeopcodetargets.py`` while running "
"``make``. Python auto-generates some of its own code, and a full build "
"from scratch needs to run the auto-generation scripts. However, this "
"makes the Python build require an already installed Python interpreter; "
"this can also cause version mismatches when trying to build an old (2.x) "
"Python with a new (3.x) Python installed, or vice versa."
msgstr ""

#: ../../setup.rst:483
msgid ""
"To overcome this problem, auto-generated files are also checked into the "
"Git repository. So if you don't touch the auto-generation scripts, "
"there's no real need to auto-generate anything."
msgstr ""

#: ../../setup.rst:488
msgid "Editors and Tools"
msgstr ""

#: ../../setup.rst:490
msgid ""
"Python is used widely enough that practically all code editors have some "
"form of support for writing Python code. Various coding tools also "
"include Python support."
msgstr ""

#: ../../setup.rst:494
msgid ""
"For editors and tools which the core developers have felt some special "
"comment is needed for coding *in* Python, see :ref:`resources`."
msgstr ""

#: ../../setup.rst:499
msgid "Directory structure"
msgstr ""

#: ../../setup.rst:501
msgid ""
"There are several top-level directories in the CPython source tree. "
"Knowing what each one is meant to hold will help you find where a certain"
" piece of functionality is implemented. Do realize, though, there are "
"always exceptions to every rule."
msgstr ""

#: ../../setup.rst:508
msgid "``Doc``"
msgstr ""

#: ../../setup.rst:507
msgid ""
"The official documentation. This is what https://docs.python.org/ uses. "
"See also :ref:`building-doc`."
msgstr ""

#: ../../setup.rst:512
msgid "``Grammar``"
msgstr ""

#: ../../setup.rst:511
msgid ""
"Contains the :abbr:`EBNF (Extended Backus-Naur Form)` grammar file for "
"Python."
msgstr ""

#: ../../setup.rst:515
msgid "``Include``"
msgstr ""

#: ../../setup.rst:515
msgid "Contains all interpreter-wide header files."
msgstr ""

#: ../../setup.rst:518
msgid "``Lib``"
msgstr ""

#: ../../setup.rst:518
msgid "The part of the standard library implemented in pure Python."
msgstr ""

#: ../../setup.rst:521
msgid "``Mac``"
msgstr ""

#: ../../setup.rst:521
msgid "Mac-specific code (e.g., using IDLE as an OS X application)."
msgstr ""

#: ../../setup.rst:525
msgid "``Misc``"
msgstr ""

#: ../../setup.rst:524
msgid ""
"Things that do not belong elsewhere. Typically this is varying kinds of "
"developer-specific documentation."
msgstr ""

#: ../../setup.rst:529
msgid "``Modules``"
msgstr ""

#: ../../setup.rst:528
msgid ""
"The part of the standard library (plus some other code) that is "
"implemented in C."
msgstr ""

#: ../../setup.rst:532
msgid "``Objects``"
msgstr ""

#: ../../setup.rst:532
msgid "Code for all built-in types."
msgstr ""

#: ../../setup.rst:535
msgid "``PC``"
msgstr ""

#: ../../setup.rst:535
msgid "Windows-specific code."
msgstr ""

#: ../../setup.rst:539
msgid "``PCbuild``"
msgstr ""

#: ../../setup.rst:538
msgid ""
"Build files for the version of MSVC currently used for the Windows "
"installers provided on python.org."
msgstr ""

#: ../../setup.rst:543
msgid "``Parser``"
msgstr ""

#: ../../setup.rst:542
msgid ""
"Code related to the parser. The definition of the AST nodes is also kept "
"here."
msgstr ""

#: ../../setup.rst:548
msgid "``Programs``"
msgstr ""

#: ../../setup.rst:546
msgid ""
"Source code for C executables, including the main function for the "
"CPython interpreter (in versions prior to Python 3.5, these files are in "
"the Modules directory)."
msgstr ""

#: ../../setup.rst:552
msgid "``Python``"
msgstr ""

#: ../../setup.rst:551
msgid ""
"The code that makes up the core CPython runtime. This includes the "
"compiler, eval loop and various built-in modules."
msgstr ""

#: ../../setup.rst:555
msgid "``Tools``"
msgstr ""

#: ../../setup.rst:555
msgid "Various tools that are (or have been) used to maintain Python."
msgstr ""

