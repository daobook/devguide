# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 09:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../devcycle.rst:4
msgid "Development Cycle"
msgstr ""

#: ../../devcycle.rst:6
msgid ""
"The responsibilities of a core developer shift based on what kind of "
"branch of Python a developer is working on and what stage the branch is "
"in."
msgstr ""

#: ../../devcycle.rst:9
msgid ""
"To clarify terminology, Python uses a ``major.minor.micro`` nomenclature "
"for production-ready releases. So for Python 3.1.2 final, that is a "
"*major version* of 3, a *minor version* of 1, and a *micro version* of 2."
msgstr ""

#: ../../devcycle.rst:13
msgid ""
"new *major versions* are exceptional; they only come when strongly "
"incompatible changes are deemed necessary, and are planned very long in "
"advance;"
msgstr ""

#: ../../devcycle.rst:17
msgid ""
"new *minor versions* are feature releases; they get released annually, "
"from the current :ref:`in-development <indevbranch>` branch;"
msgstr ""

#: ../../devcycle.rst:20
msgid ""
"new *micro versions* are bugfix releases; they get released roughly every"
" 2 months; they are prepared in :ref:`maintenance <maintbranch>` "
"branches."
msgstr ""

#: ../../devcycle.rst:24
msgid ""
"We also publish non-final versions which get an additional qualifier: "
":ref:`alpha`, :ref:`beta`, :ref:`release candidate <rc>`.  These versions"
" are aimed at testing by advanced users, not production use."
msgstr ""

#: ../../devcycle.rst:28
msgid ""
"Each release of Python is tagged in the source repo with a tag of the "
"form ``vX.Y.ZTN``, where ``X`` is the major version, ``Y`` is the minor "
"version, ``Z`` is the micro version, ``T`` is the release level (``a`` "
"for alpha releases, ``b`` for beta, ``rc`` release candidate, and *null* "
"for final releases), and ``N`` is the release serial number. Some "
"examples of release tags: ``v3.7.0a1``, ``v3.6.3``, ``v2.7.14rc1``."
msgstr ""

#: ../../devcycle.rst:36
msgid "Branches"
msgstr ""

#: ../../devcycle.rst:38
msgid ""
"There is a branch for each *feature version*, whether released or not "
"(e.g. 3.7, 3.8)."
msgstr ""

#: ../../devcycle.rst:45
msgid "In-development (main) branch"
msgstr ""

#: ../../devcycle.rst:47
msgid ""
"The ``main`` branch is the branch for the next feature release; it is "
"under active development for all kinds of changes: new features, semantic"
" changes, performance improvements, bug fixes."
msgstr ""

#: ../../devcycle.rst:51
msgid ""
"At some point during the life-cycle of a release, a new :ref:`maintenance"
" branch <maintbranch>` is created to host all bug fixing activity for "
"further micro versions in a feature version (3.8.1, 3.8.2, etc.)."
msgstr ""

#: ../../devcycle.rst:55
msgid ""
"For versions 3.4 and before, this was conventionally done when the final "
"release was cut (for example, 3.4.0 final)."
msgstr ""

#: ../../devcycle.rst:58
msgid ""
"Starting with the 3.5 release, we create the release maintenance branch "
"(e.g. 3.5) at the time we enter beta (3.5.0 beta 1).  This allows feature"
" development for the release 3.n+1 to occur within the main branch "
"alongside the beta and release candidate stabilization periods for "
"release 3.n."
msgstr ""

#: ../../devcycle.rst:67
msgid "Maintenance branches"
msgstr ""

#: ../../devcycle.rst:69
msgid ""
"A branch for a previous feature release, currently being maintained for "
"bug fixes, or for the next feature release in its :ref:`beta <beta>` or "
":ref:`release candidate <rc>` stages. There is usually either one or two "
"maintenance branches at any given time for Python 3.x.  After the final "
"release of a new minor version (3.x.0), releases produced from a "
"maintenance branch are called **bugfix** or **maintenance** releases; the"
" terms are used interchangeably. These releases have a **micro version** "
"number greater than zero."
msgstr ""

#: ../../devcycle.rst:78
msgid ""
"The only changes allowed to occur in a maintenance branch without debate "
"are bug fixes.  Also, a general rule for maintenance branches is that "
"compatibility must not be broken at any point between sibling micro "
"releases (3.5.1, 3.5.2, etc.).  For both rules, only rare exceptions are "
"accepted and **must** be discussed first."
msgstr ""

#: ../../devcycle.rst:84
msgid ""
"A new maintenance branch is normally created when the next feature "
"release cycle reaches feature freeze, i.e. at its first beta pre-release."
" From that point on, changes intended for remaining pre-releases, the "
"final release (3.x.0), and subsequent bugfix releases are merged to that "
"maintenance branch."
msgstr ""

#: ../../devcycle.rst:90
msgid ""
"Sometime following the final release (3.x.0), the maintenance branch for "
"the previous minor version will go into :ref:`security mode <secbranch>`,"
" usually after at least one more bugfix release at the discretion of the "
"release manager.  For example, the 3.4 maintenance branch was put into "
":ref:`security mode <secbranch>` after the 3.4.4 bugfix release which "
"followed the release of 3.5.1."
msgstr ""

#: ../../devcycle.rst:100
msgid "Security branches"
msgstr ""

#: ../../devcycle.rst:102
msgid ""
"A branch less than 5 years old but no longer in bugfix mode is a security"
" branch."
msgstr ""

#: ../../devcycle.rst:105
msgid ""
"The only changes made to a security branch are those fixing issues "
"exploitable by attackers such as crashes, privilege escalation and, "
"optionally, other issues such as denial of service attacks.  Any other "
"changes are **not** considered a security risk and thus not backported to"
" a security branch. You should also consider fixing hard-failing tests in"
" open security branches since it is important to be able to run the tests"
" successfully before releasing."
msgstr ""

#: ../../devcycle.rst:112
msgid ""
"Commits to security branches are to be coordinated with the release "
"manager for the corresponding feature version, as listed in the "
":ref:`branchstatus`. Merging of pull requests to security branches is "
"restricted to release managers. Any release made from a security branch "
"is source-only and done only when actual security patches have been "
"applied to the branch. These releases have a **micro version** number "
"greater than the last **bugfix** release."
msgstr ""

#: ../../devcycle.rst:122
msgid "End-of-life branches"
msgstr ""

#: ../../devcycle.rst:124
msgid ""
"The code base for a release cycle which has reached end-of-life status is"
" frozen and no longer has a branch in the repo.  The final state of the "
"end-of-lifed branch is recorded as a tag with the same name as the former"
" branch, e.g. ``3.3`` or ``2.6``."
msgstr ""

#: ../../devcycle.rst:129
msgid ""
"For reference, here are the Python versions that most recently reached "
"their end-of-life:"
msgstr ""

#: ../../devcycle.rst:132
msgid "Branch"
msgstr ""

#: ../../devcycle.rst:132
msgid "Schedule"
msgstr ""

#: ../../devcycle.rst:132
msgid "First release"
msgstr ""

#: ../../devcycle.rst:132
msgid "End-of-life"
msgstr ""

#: ../../devcycle.rst:132
msgid "Release manager"
msgstr ""

#: ../../devcycle.rst:134
msgid "3.5"
msgstr ""

#: ../../devcycle.rst:134
msgid ":pep:`478`"
msgstr ""

#: ../../devcycle.rst:134
msgid "2015-09-13"
msgstr ""

#: ../../devcycle.rst:134
msgid "2020-09-30"
msgstr ""

#: ../../devcycle.rst:134 ../../devcycle.rst:136
msgid "Larry Hastings"
msgstr ""

#: ../../devcycle.rst:136
msgid "3.4"
msgstr ""

#: ../../devcycle.rst:136
msgid ":pep:`429`"
msgstr ""

#: ../../devcycle.rst:136
msgid "2014-03-16"
msgstr ""

#: ../../devcycle.rst:136
msgid "2019-03-18"
msgstr ""

#: ../../devcycle.rst:138
msgid "3.3"
msgstr ""

#: ../../devcycle.rst:138
msgid ":pep:`398`"
msgstr ""

#: ../../devcycle.rst:138
msgid "2012-09-29"
msgstr ""

#: ../../devcycle.rst:138
msgid "2017-09-29"
msgstr ""

#: ../../devcycle.rst:138
msgid "Georg Brandl, Ned Deily (3.3.7+)"
msgstr ""

#: ../../devcycle.rst:140
msgid "3.2"
msgstr ""

#: ../../devcycle.rst:140
msgid ":pep:`392`"
msgstr ""

#: ../../devcycle.rst:140
msgid "2011-02-20"
msgstr ""

#: ../../devcycle.rst:140
msgid "2016-02-20"
msgstr ""

#: ../../devcycle.rst:140
msgid "Georg Brandl"
msgstr ""

#: ../../devcycle.rst:142
msgid "3.1"
msgstr ""

#: ../../devcycle.rst:142
msgid ":pep:`375`"
msgstr ""

#: ../../devcycle.rst:142 ../../devcycle.rst:144
msgid "2009-06-27"
msgstr ""

#: ../../devcycle.rst:142
msgid "2012-04-09"
msgstr ""

#: ../../devcycle.rst:142 ../../devcycle.rst:146 ../../devcycle.rst:280
msgid "Benjamin Peterson"
msgstr ""

#: ../../devcycle.rst:144
msgid "3.0"
msgstr ""

#: ../../devcycle.rst:144 ../../devcycle.rst:148
msgid ":pep:`361`"
msgstr ""

#: ../../devcycle.rst:144
msgid "2008-12-03"
msgstr ""

#: ../../devcycle.rst:144 ../../devcycle.rst:148
msgid "Barry Warsaw"
msgstr ""

#: ../../devcycle.rst:146
msgid "2.7"
msgstr ""

#: ../../devcycle.rst:146
msgid ":pep:`373`"
msgstr ""

#: ../../devcycle.rst:146
msgid "2010-07-03"
msgstr ""

#: ../../devcycle.rst:146
msgid "2020-01-01"
msgstr ""

#: ../../devcycle.rst:148
msgid "2.6"
msgstr ""

#: ../../devcycle.rst:148
msgid "2008-10-01"
msgstr ""

#: ../../devcycle.rst:148
msgid "2013-10-29"
msgstr ""

#: ../../devcycle.rst:151
msgid ""
"The latest release for each Python version can be found on the `download "
"page <https://www.python.org/downloads/>`_."
msgstr ""

#: ../../devcycle.rst:157
msgid "Stages"
msgstr ""

#: ../../devcycle.rst:159
msgid ""
"Based on what stage the :ref:`in-development <indevbranch>` version of "
"Python is in, the responsibilities of a core developer change in regards "
"to commits to the :abbr:`VCS (version control system)`."
msgstr ""

#: ../../devcycle.rst:165
msgid "Pre-alpha"
msgstr ""

#: ../../devcycle.rst:167
msgid ""
"The branch is in this stage when no official release has been done since "
"the latest final release.  There are no special restrictions placed on "
"commits, although the usual advice applies (getting patches reviewed, "
"avoiding breaking the buildbots)."
msgstr ""

#: ../../devcycle.rst:175
msgid "Alpha"
msgstr ""

#: ../../devcycle.rst:177
msgid ""
"Alpha releases typically serve as a reminder to core developers that they"
" need to start getting in changes that change semantics or add something "
"to Python as such things should not be added during a Beta_. Otherwise no"
" new restrictions are in place while in alpha."
msgstr ""

#: ../../devcycle.rst:185
msgid "Beta"
msgstr ""

#: ../../devcycle.rst:187
msgid ""
"After a first beta release is published, no new features are accepted.  "
"Only bug fixes and improvements to documentation and tests can now be "
"committed. This is when core developers should concentrate on the task of"
" fixing regressions and other new issues filed by users who have "
"downloaded the alpha and beta releases."
msgstr ""

#: ../../devcycle.rst:193
msgid ""
"Being in beta can be viewed much like being in RC_ but without the extra "
"overhead of needing commit reviews."
msgstr ""

#: ../../devcycle.rst:196
msgid ""
"Please see the note in the `In-development (main) branch`_ section above "
"for new information about the creation of the 3.5 maintenance branch "
"during beta."
msgstr ""

#: ../../devcycle.rst:203
msgid "Release Candidate (RC)"
msgstr ""

#: ../../devcycle.rst:205
msgid ""
"A branch preparing for an RC release can only have bugfixes applied that "
"have been reviewed by other core developers.  Generally, these issues "
"must be severe enough (e.g. crashes) that they deserve fixing before the "
"final release. All other issues should be deferred to the next "
"development cycle, since stability is the strongest concern at this "
"point."
msgstr ""

#: ../../devcycle.rst:211
msgid ""
"While the goal is to have no code changes between a RC and a final "
"release, there may be a need for final documentation or test fixes. Any "
"such proposed changes should be discussed first with the release manager."
msgstr ""

#: ../../devcycle.rst:215
msgid ""
"You **cannot** skip the peer review during an RC, no matter how small! "
"Even if it is a simple copy-and-paste change, **everything** requires "
"peer review from a core developer."
msgstr ""

#: ../../devcycle.rst:222
msgid "Final"
msgstr ""

#: ../../devcycle.rst:224
msgid ""
"When a final release is being cut, only the release manager (RM) can make"
" changes to the branch.  After the final release is published, the full "
":ref:`development cycle <stages>` starts again for the next minor "
"version."
msgstr ""

#: ../../devcycle.rst:230
msgid "Repository Administration"
msgstr ""

#: ../../devcycle.rst:232
msgid ""
"The source code is currently hosted on `GitHub "
"<https://github.com/python/cpython>`_ in the `Python organization "
"<https://github.com/python/>`_."
msgstr ""

#: ../../devcycle.rst:236
msgid "Organization Repository Policy"
msgstr ""

#: ../../devcycle.rst:238
msgid ""
"Within the `Python organization <https://github.com/python/>`_, "
"repositories are expected to fall within these general categories:"
msgstr ""

#: ../../devcycle.rst:240
msgid ""
"The reference implementation of Python and related repositories (i.e. "
"`CPython <https://github.com/python/cpython>`_)"
msgstr ""

#: ../../devcycle.rst:241
msgid ""
"Reference implementations of PEPs (e.g. `mypy "
"<https://github.com/python/mypy>`_)"
msgstr ""

#: ../../devcycle.rst:242
msgid ""
"Tooling and support around CPython and the language (e.g. `python.org "
"repository <https://github.com/python/pythondotorg>`_)"
msgstr ""

#: ../../devcycle.rst:243
msgid ""
"PSF-related repositories (e.g. the `Code of Conduct "
"<https://github.com/python/pycon-code-of-conduct>`_)"
msgstr ""

#: ../../devcycle.rst:244
msgid ""
"PSF Infrastructure repositories (e.g. the `PSF Infrastructure Salt "
"configurations <https://github.com/python/psf-salt>`_)"
msgstr ""

#: ../../devcycle.rst:246
msgid ""
"For any repository which does not explicitly and clearly fall under one "
"of these categories, permission should be sought from the `Python "
"steering council <https://github.com/python/steering-council>`_."
msgstr ""

#: ../../devcycle.rst:250
msgid "Organization Owner Policy"
msgstr ""

#: ../../devcycle.rst:252
msgid ""
"The GitHub Organization Owner role allows for full management of all "
"aspects of the Python organization. Allowing for visibility and "
"management of all aspects at all levels including organization "
"membership, team membership, access control, and merge privileges on all "
"repositories. For full details of the permission levels see `GitHub's "
"documentation on Organization permission levels "
"<https://help.github.com/articles/permission-levels-for-an-organization"
"/#permission-levels-for-an-organization>`_. This role is paramount to the"
" security of the Python Language, Community, and Infrastructure."
msgstr ""

#: ../../devcycle.rst:262
msgid ""
"The Executive Director of the Python Software Foundation delegates "
"authority on GitHub Organization Owner Status to Ee Durbin - Python "
"Software Foundation Director of Infrastructure. Common reasons for this "
"role are: Infrastructure Staff Membership, Python Software Foundation "
"General Counsel, and Python Software Foundation Staff as fallback."
msgstr ""

#: ../../devcycle.rst:268 ../../devcycle.rst:312
msgid ""
"Inactive or unreachable members may be removed with or without notice. "
"Members who no longer necessitate this level of access will be removed "
"with notice."
msgstr ""

#: ../../devcycle.rst:271
msgid ""
"Multi-Factor Authentication must be enabled by the user in order to "
"remain an Owner of the Python Organization."
msgstr ""

#: ../../devcycle.rst:275
msgid "Current Owners"
msgstr ""

#: ../../devcycle.rst:278 ../../devcycle.rst:322
msgid "Name"
msgstr ""

#: ../../devcycle.rst:278 ../../devcycle.rst:322
msgid "Role"
msgstr ""

#: ../../devcycle.rst:278 ../../devcycle.rst:322
msgid "GitHub Username"
msgstr ""

#: ../../devcycle.rst:280 ../../devcycle.rst:282 ../../devcycle.rst:284
msgid "Infrastructure Staff"
msgstr ""

#: ../../devcycle.rst:280
msgid "benjaminp"
msgstr ""

#: ../../devcycle.rst:282
msgid "Noah Kantrowitz"
msgstr ""

#: ../../devcycle.rst:282
msgid "coderanger"
msgstr ""

#: ../../devcycle.rst:284
msgid "Donald Stufft"
msgstr ""

#: ../../devcycle.rst:284
msgid "dstufft"
msgstr ""

#: ../../devcycle.rst:286
msgid "Ewa Jodlowska"
msgstr ""

#: ../../devcycle.rst:286
msgid "PSF Executive Director"
msgstr ""

#: ../../devcycle.rst:286
msgid "ejodlowska"
msgstr ""

#: ../../devcycle.rst:288
msgid "Ee Durbin"
msgstr ""

#: ../../devcycle.rst:288
msgid "PSF Director of Infrastructure"
msgstr ""

#: ../../devcycle.rst:288
msgid "ewdurbin"
msgstr ""

#: ../../devcycle.rst:290
msgid "Van Lindberg"
msgstr ""

#: ../../devcycle.rst:290
msgid "PSF General Counsel"
msgstr ""

#: ../../devcycle.rst:290
msgid "VanL"
msgstr ""

#: ../../devcycle.rst:292 ../../devcycle.rst:338
msgid "Ezio Melotti"
msgstr ""

#: ../../devcycle.rst:292
msgid "roundup -> github migration"
msgstr ""

#: ../../devcycle.rst:292 ../../devcycle.rst:338
msgid "ezio-melotti"
msgstr ""

#: ../../devcycle.rst:294 ../../devcycle.rst:327
msgid "Łukasz Langa"
msgstr ""

#: ../../devcycle.rst:294
msgid "CPython Developer in Residence"
msgstr ""

#: ../../devcycle.rst:294 ../../devcycle.rst:327
msgid "ambv"
msgstr ""

#: ../../devcycle.rst:298
msgid "Repository Administrator Role Policy"
msgstr ""

#: ../../devcycle.rst:300
msgid ""
"The Administrator role on the repository allows for managing all aspects "
"including collaborators, access control, integrations, webhooks, and "
"branch protection. For full details of the permission levels see "
"`GitHub's documentation on Repository permission levels "
"<https://help.github.com/articles/repository-permission-levels-for-an-"
"organization/>`_. Common reasons for this role are: maintenance of Core "
"Developer Workflow tooling, Release Managers for all :ref:`in-development"
" <indevbranch>`, :ref:`maintenance <maintbranch>`, and :ref:`security "
"mode <secbranch>` releases, and additional Python Core Developers as "
"necessary for redundancy. Occasional temporary administrator access is "
"acceptable as necessary for Core Developer workflow projects."
msgstr ""

#: ../../devcycle.rst:315
msgid ""
"Multi-Factor Authentication must be enabled by the user in order to "
"remain an Administrator of the repository."
msgstr ""

#: ../../devcycle.rst:319
msgid "Current Administrators"
msgstr ""

#: ../../devcycle.rst:324
msgid "Pablo Galindo"
msgstr ""

#: ../../devcycle.rst:324
msgid "Python 3.10 and 3.11 Release Manager, Maintainer of buildbot.python.org"
msgstr ""

#: ../../devcycle.rst:324
msgid "pablogsal"
msgstr ""

#: ../../devcycle.rst:327
msgid ""
"Python 3.8 and 3.9 Release Manager, PSF CPython Developer in Residence "
"2021-2022"
msgstr ""

#: ../../devcycle.rst:330
msgid "Ned Deily"
msgstr ""

#: ../../devcycle.rst:330
msgid "Python 3.6 and 3.7 Release Manager"
msgstr ""

#: ../../devcycle.rst:330
msgid "ned-deily"
msgstr ""

#: ../../devcycle.rst:332
msgid "Lary Hastings"
msgstr ""

#: ../../devcycle.rst:332
msgid "Retired Release Manager (for Python 3.4 and 3.5)"
msgstr ""

#: ../../devcycle.rst:332
msgid "larryhastings"
msgstr ""

#: ../../devcycle.rst:334
msgid "Berker Peksag"
msgstr ""

#: ../../devcycle.rst:334
msgid "Maintainer of bpo-linkify and cpython-emailer-webhook"
msgstr ""

#: ../../devcycle.rst:334
msgid "berkerpeksag"
msgstr ""

#: ../../devcycle.rst:336
msgid "Brett Cannon"
msgstr ""

#: ../../devcycle.rst:336
msgid "Maintainer of bedevere and the-knights-who-say-ni"
msgstr ""

#: ../../devcycle.rst:336
msgid "brettcannon"
msgstr ""

#: ../../devcycle.rst:338
msgid "Maintainer of bugs.python.org GitHub webhook integration"
msgstr ""

#: ../../devcycle.rst:340
msgid "Mariatta Wijaya"
msgstr ""

#: ../../devcycle.rst:340
msgid "Maintainer of blurb_it and miss-islington"
msgstr ""

#: ../../devcycle.rst:340
msgid "Mariatta"
msgstr ""

#: ../../devcycle.rst:344
msgid "Repository Release Manager Role Policy"
msgstr ""

#: ../../devcycle.rst:346
msgid ""
"Release Managers for :ref:`in-development <indevbranch>`, "
":ref:`maintenance <maintbranch>`, and :ref:`security mode <secbranch>` "
"Python releases are granted Administrator privileges on the repository. "
"Once a release branch has entered :ref:`end-of-life <eolbranch>`, the "
"Release Manager for that branch is removed as an Administrator and "
"granted sole privileges (out side of repository administrators) to merge "
"changes to that branch."
msgstr ""

#: ../../devcycle.rst:353
msgid ""
"Multi-Factor Authentication must be enabled by the user in order to "
"retain access as a Release Manager of the branch."
msgstr ""

