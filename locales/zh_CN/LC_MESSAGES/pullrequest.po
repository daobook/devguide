# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 09:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pullrequest.rst:4
msgid "Lifecycle of a Pull Request"
msgstr ""

#: ../../pullrequest.rst:9
msgid "Introduction"
msgstr ""

#: ../../pullrequest.rst:11
msgid ""
"CPython uses a workflow based on pull requests. What this means is that "
"you create a branch in Git, make your changes, push those changes to your"
" fork on GitHub (``origin``), and then create a pull request against the "
"official CPython repository (``upstream``)."
msgstr ""

#: ../../pullrequest.rst:20
msgid "Quick Guide"
msgstr ""

#: ../../pullrequest.rst:22
msgid ""
"`Clear communication`_ is key to contributing to any project, especially "
"an `Open Source`_ project like CPython."
msgstr ""

#: ../../pullrequest.rst:25
msgid "Here is a quick overview of how you can contribute to CPython:"
msgstr ""

#: ../../pullrequest.rst:27
msgid "`Create an issue`_ that describes your change [*]_"
msgstr ""

#: ../../pullrequest.rst:29
msgid ":ref:`Create a new branch in Git <pullrequest-steps>`"
msgstr ""

#: ../../pullrequest.rst:31
msgid "Work on changes (e.g. fix a bug or add a new feature)"
msgstr ""

#: ../../pullrequest.rst:33
msgid ":ref:`Run tests <runtests>` and ``make patchcheck``"
msgstr ""

#: ../../pullrequest.rst:35
msgid ""
":ref:`Commit <commit-changes>` and :ref:`push <push-changes>` changes to "
"your GitHub fork"
msgstr ""

#: ../../pullrequest.rst:38
msgid "`Create Pull Request`_ on GitHub to merge a branch from your fork"
msgstr ""

#: ../../pullrequest.rst:40
msgid ""
"Make sure the continuous integration checks on your Pull Request are "
"green (i.e. successful)"
msgstr ""

#: ../../pullrequest.rst:43
msgid "Review and address `comments on your Pull Request`_"
msgstr ""

#: ../../pullrequest.rst:45
msgid ""
"When your changes are merged, you can :ref:`delete the PR branch "
"<deleting_branches>`"
msgstr ""

#: ../../pullrequest.rst:48
msgid "Celebrate contributing to CPython! :)"
msgstr ""

#: ../../pullrequest.rst:50
msgid ""
"If an issue is trivial (e.g. typo fixes), or if an issue already exists, "
"you can skip this step."
msgstr ""

#: ../../pullrequest.rst:54
msgid ""
"In order to keep the commit history intact, please avoid squashing or "
"amending history and then force-pushing to the PR. Reviewers often want "
"to look at individual commits."
msgstr ""

#: ../../pullrequest.rst:70
msgid "Step-by-step Guide"
msgstr ""

#: ../../pullrequest.rst:72
msgid ""
"You should have already :ref:`set up your system <setup>`, :ref:`got the "
"source code <checkout>`, and :ref:`built Python <compiling>`."
msgstr ""

#: ../../pullrequest.rst:75
msgid "Update data from your ``upstream`` repository::"
msgstr ""

#: ../../pullrequest.rst:79
msgid "Create a new branch in your local clone::"
msgstr ""

#: ../../pullrequest.rst:83
msgid ""
"Make changes to the code, and use ``git status`` and ``git diff`` to see "
"them."
msgstr ""

#: ../../pullrequest.rst:85
msgid "(Learn more about :ref:`good-prs`)"
msgstr ""

#: ../../pullrequest.rst:87
msgid "Make sure the changes are fine and don't cause any test failure::"
msgstr ""

#: ../../pullrequest.rst:92
msgid "(Learn more about :ref:`patchcheck` and about :doc:`runtests`)"
msgstr ""

#: ../../pullrequest.rst:94
msgid "Once you are satisfied with the changes, add the files and commit them::"
msgstr ""

#: ../../pullrequest.rst:99
msgid "(Learn more about :ref:`good-commits`)"
msgstr ""

#: ../../pullrequest.rst:101
msgid "Then push your work to your GitHub fork::"
msgstr ""

#: ../../pullrequest.rst:105
msgid ""
"Finally go on :samp:`https://github.com/{<your-username>}/cpython`: you "
"will see a box with the branch you just pushed and a green button that "
"allows you to create a pull request against the official CPython "
"repository."
msgstr ""

#: ../../pullrequest.rst:109
msgid ""
"When people start adding review comments, you can address them by "
"switching to your branch, making more changes, committing them, and "
"pushing them to automatically update your PR::"
msgstr ""

#: ../../pullrequest.rst:119
msgid ""
"If a core developer reviewing your PR pushed one or more commits to your "
"PR branch, then after checking out your branch and before editing, run::"
msgstr ""

#: ../../pullrequest.rst:124
msgid ""
"If you have made local changes that have not been pushed to your fork and"
" there are merge conflicts, git will warn you about this and enter "
"conflict resolution mode. See :ref:`resolving-merge-conflicts` below."
msgstr ""

#: ../../pullrequest.rst:128
msgid ""
"If time passes and there are merge conflicts with the main branch, GitHub"
" will show a warning to this end and you may be asked to address this. "
"Merge the changes from the main branch while resolving the conflicts "
"locally::"
msgstr ""

#: ../../pullrequest.rst:137
msgid ""
"After your PR has been accepted and merged, you can :ref:`delete the "
"branch <deleting_branches>`::"
msgstr ""

#: ../../pullrequest.rst:144
msgid ""
"You can still upload a patch to bugs.python.org_, but the GitHub pull "
"request workflow is **strongly** preferred."
msgstr ""

#: ../../pullrequest.rst:151
msgid "Resolving Merge Conflicts"
msgstr ""

#: ../../pullrequest.rst:153
msgid ""
"When merging changes from different branches (or variants of a branch on "
"different repos), the two branches may contain incompatible changes to "
"one or more files. These are called \"merge conflicts\" and need to be "
"manually resolved as follows:"
msgstr ""

#: ../../pullrequest.rst:158
msgid "Check which files have merge conflicts::"
msgstr ""

#: ../../pullrequest.rst:162
msgid ""
"Edit the affected files and bring them to their intended final state. "
"Make sure to remove the special \"conflict markers\" inserted by git."
msgstr ""

#: ../../pullrequest.rst:165
msgid "Commit the affected files::"
msgstr ""

#: ../../pullrequest.rst:170
msgid ""
"When running the final command, git may open an editor for writing a "
"commit message. It is usually okay to leave that as-is and close the "
"editor."
msgstr ""

#: ../../pullrequest.rst:173
msgid ""
"See `the merge command's documentation <https://git-scm.com/docs/git-"
"merge>`_ for a detailed technical explanation."
msgstr ""

#: ../../pullrequest.rst:180
msgid "Making Good PRs"
msgstr ""

#: ../../pullrequest.rst:182
msgid ""
"When creating a pull request for submission, there are several things "
"that you should do to help ensure that your pull request is accepted."
msgstr ""

#: ../../pullrequest.rst:185
msgid ""
"First, make sure to follow Python's style guidelines. For Python code you"
" should follow :PEP:`8`, and for C code you should follow :PEP:`7`. If "
"you have one or two discrepancies those can be fixed by the core "
"developer who merges your pull request. But if you have systematic "
"deviations from the style guides your pull request will be put on hold "
"until you fix the formatting issues."
msgstr ""

#: ../../pullrequest.rst:192
msgid ""
"Pull requests with only code formatting changes are usually rejected. On "
"the other hand, fixes for typos and grammar errors in documents and "
"docstrings are welcome."
msgstr ""

#: ../../pullrequest.rst:196
msgid ""
"Second, be aware of backwards-compatibility considerations. While the "
"core developer who eventually handles your pull request will make the "
"final call on whether something is acceptable, thinking about backwards-"
"compatibility early will help prevent having your pull request rejected "
"on these grounds. Put yourself in the shoes of someone whose code will be"
" broken by the change(s) introduced by the pull request. It is quite "
"likely that any change made will break someone's code, so you need to "
"have a good reason to make a change as you will be forcing someone to "
"update their code. (This obviously does not apply to new classes or "
"functions; new arguments should be optional and have default values which"
" maintain the existing behavior.) If in doubt, have a look at :PEP:`387` "
"or :ref:`discuss <communication>` the issue with experienced developers."
msgstr ""

#: ../../pullrequest.rst:209
msgid ""
"Third, make sure you have proper tests to verify your pull request works "
"as expected. Pull requests will not be accepted without the proper tests!"
msgstr ""

#: ../../pullrequest.rst:212
msgid ""
"Fourth, make sure the entire test suite :ref:`runs <runtests>` **without "
"failure** because of your changes.  It is not sufficient to only run "
"whichever test seems impacted by your changes, because there might be "
"interferences unknown to you between your changes and some other part of "
"the interpreter."
msgstr ""

#: ../../pullrequest.rst:217
msgid ""
"Fifth, proper :ref:`documentation <documenting>` additions/changes should"
" be included."
msgstr ""

#: ../../pullrequest.rst:224
msgid "``patchcheck``"
msgstr ""

#: ../../pullrequest.rst:226
msgid ""
"``patchcheck`` is a simple automated patch checklist that guides a "
"developer through the common patch generation checks. To run "
"``patchcheck``:"
msgstr ""

#: ../../pullrequest.rst:229
msgid "On *UNIX* (including Mac OS X)::"
msgstr ""

#: ../../pullrequest.rst:233
msgid "On *Windows* (after any successful build):"
msgstr ""

#: ../../pullrequest.rst:239
msgid "The automated patch checklist runs through:"
msgstr ""

#: ../../pullrequest.rst:241
msgid ""
"Are there any whitespace problems in Python files? (using "
"``Tools/scripts/reindent.py``)"
msgstr ""

#: ../../pullrequest.rst:243
msgid "Are there any whitespace problems in C files?"
msgstr ""

#: ../../pullrequest.rst:244
msgid ""
"Are there any whitespace problems in the documentation? (using "
"``Tools/scripts/reindent-rst.py``)"
msgstr ""

#: ../../pullrequest.rst:246
msgid "Has the documentation been updated?"
msgstr ""

#: ../../pullrequest.rst:247
msgid "Has the test suite been updated?"
msgstr ""

#: ../../pullrequest.rst:248
msgid ""
"Has an entry under ``Misc/NEWS.d/next`` been added? (using `blurb-it "
"<https://blurb-it.herokuapp.com/>`_, or the `blurb "
"<https://pypi.org/project/blurb/>`_ tool)"
msgstr ""

#: ../../pullrequest.rst:251
msgid "Has ``Misc/ACKS`` been updated?"
msgstr ""

#: ../../pullrequest.rst:252
msgid "Has ``configure`` been regenerated, if necessary?"
msgstr ""

#: ../../pullrequest.rst:253
msgid "Has ``pyconfig.h.in`` been regenerated, if necessary?"
msgstr ""

#: ../../pullrequest.rst:255
msgid ""
"The automated patch check doesn't actually *answer* all of these "
"questions. Aside from the whitespace checks, the tool is a memory aid for"
" the various elements that can go into making a complete patch."
msgstr ""

#: ../../pullrequest.rst:264
msgid "Making Good Commits"
msgstr ""

#: ../../pullrequest.rst:266
msgid ""
"Each feature or bugfix should be addressed by a single pull request, and "
"for each pull request there may be several commits.  In particular:"
msgstr ""

#: ../../pullrequest.rst:269
msgid ""
"Do **not** fix more than one issue in the same commit (except, of course,"
" if one code change fixes all of them)."
msgstr ""

#: ../../pullrequest.rst:271
msgid ""
"Do **not** do cosmetic changes to unrelated code in the same commit as "
"some feature/bugfix."
msgstr ""

#: ../../pullrequest.rst:274
msgid "Commit messages should follow the following structure::"
msgstr ""

#: ../../pullrequest.rst:281
msgid ""
"The first line or sentence is meant to be a dense, to-the-point "
"explanation of what the purpose of the commit is. The imperative form "
"(used in the example above) is strongly preferred to a descriptive form "
"such as 'the spam module is now more spammy'. Use ``git log --oneline`` "
"to see existing title lines. Furthermore, the first line should not end "
"in a period."
msgstr ""

#: ../../pullrequest.rst:287
msgid ""
"If this is not enough detail for a commit, a new paragraph(s) can be "
"added to explain in proper depth what has happened (detail should be good"
" enough that a core developer reading the commit message understands the "
"justification for the change)."
msgstr ""

#: ../../pullrequest.rst:292
msgid ""
"Check :ref:`the git bootcamp <accepting-and-merging-a-pr>` for further "
"instructions on how the commit message should look like when merging a "
"pull request."
msgstr ""

#: ../../pullrequest.rst:297
msgid ""
"`How to Write a Git Commit Message <https://chris.beams.io/posts/git-"
"commit/>`_ is a nice article that describes how to write a good commit "
"message."
msgstr ""

#: ../../pullrequest.rst:304
msgid "Licensing"
msgstr ""

#: ../../pullrequest.rst:306
msgid ""
"To accept your change we must have your formal approval for distributing "
"your work under the `PSF license`_.  Therefore, you need to sign a "
"`contributor agreement`_ which allows the `Python Software Foundation`_ "
"to license your code for use with Python (you retain the copyright)."
msgstr ""

#: ../../pullrequest.rst:312
msgid ""
"You only have to sign this document once, it will then apply to all your "
"further contributions to Python."
msgstr ""

#: ../../pullrequest.rst:315
msgid "Here are the steps needed in order to sign the CLA:"
msgstr ""

#: ../../pullrequest.rst:317
msgid ""
"If you don't have an account on `bugs.python.org "
"<https://bugs.python.org>`_ (aka b.p.o), please `register "
"<https://bugs.python.org/user?@template=register>`_ to create one."
msgstr ""

#: ../../pullrequest.rst:321
msgid ""
"Make sure your GitHub username is listed in the `\"Your Details\" "
"<https://cloud.githubusercontent.com/assets/2680980/23276970/d14a380c-"
"f9d1-11e6-883d-e13b6b211239.png>`_ section at b.p.o."
msgstr ""

#: ../../pullrequest.rst:325
msgid ""
"Fill out and sign the PSF `contributor form`_. The \"bugs.python.org "
"username\" requested by the form is the \"Login name\" field under \"Your"
" Details\"."
msgstr ""

#: ../../pullrequest.rst:328
msgid ""
"After signing the CLA, please **wait at least one US business day** and "
"then check the status by going to the `check-python-cla <https://check-"
"python-cla.herokuapp.com>`_ website. The check will also be run "
"automatically the next time you push changes to your PR."
msgstr ""

#: ../../pullrequest.rst:341
msgid "Submitting"
msgstr ""

#: ../../pullrequest.rst:343
msgid ""
"Once you are satisfied with your work you will want to commit your "
"changes to your branch. In general you can run ``git commit -a`` and that"
" will commit everything. You can always run ``git status`` to see what "
"changes are outstanding."
msgstr ""

#: ../../pullrequest.rst:348
msgid ""
"When all of your changes are committed (i.e. ``git status`` doesn't list "
"anything), you will want to push your branch to your fork::"
msgstr ""

#: ../../pullrequest.rst:353
msgid "This will get your changes up to GitHub."
msgstr ""

#: ../../pullrequest.rst:355
msgid ""
"Now you want to `create a pull request from your fork "
"<https://help.github.com/articles/creating-a-pull-request-"
"from-a-fork/>`_. If this is a pull request in response to a pre-existing "
"issue on the `issue tracker`_, please make sure to reference the issue "
"number using ``bpo-NNNN`` in the pull request title or message."
msgstr ""

#: ../../pullrequest.rst:362
msgid ""
"If this is a pull request for an unreported issue (assuming you already "
"performed a search on the issue tracker for a pre-existing issue), create"
" a new issue and reference it in the pull request. Please fill in as much"
" relevant detail as possible to prevent reviewers from having to delay "
"reviewing your pull request because of lack of information."
msgstr ""

#: ../../pullrequest.rst:368
msgid ""
"If this issue is so simple that there's no need for an issue to track any"
" discussion of what the pull request is trying to solve (e.g. fixing a "
"spelling mistake), then the pull request needs to have the \"skip issue\""
" label added to it by someone with commit access."
msgstr ""

#: ../../pullrequest.rst:373
msgid ""
"Your pull request may involve several commits as a result of addressing "
"code review comments.  Please keep the commit history in the pull request"
" intact by not squashing, amending, or anything that would require a "
"force push to GitHub. A detailed commit history allows reviewers to view "
"the diff of one commit to another so they can easily verify whether their"
" comments have been addressed. The commits will be squashed when the pull"
" request is merged."
msgstr ""

#: ../../pullrequest.rst:384
msgid "Converting an Existing Patch from b.p.o to GitHub"
msgstr ""

#: ../../pullrequest.rst:386
msgid ""
"When a patch exists in the `issue tracker`_ that should be converted into"
" a GitHub pull request, please first ask the original patch author to "
"prepare their own pull request. If the author does not respond after a "
"week, it is acceptable for another contributor to prepare the pull "
"request based on the existing patch. In this case, both parties should "
"sign the :ref:`CLA <cla>`. When creating a pull request based on another "
"person's patch, provide attribution to the original patch author by "
"adding \"Co-authored-by: Author Name <email_address> .\" to the pull "
"request description and commit message. See `the GitHub article "
"<https://help.github.com/articles/creating-a-commit-with-multiple-"
"authors/>`_ on how to properly add the co-author info."
msgstr ""

#: ../../pullrequest.rst:397
msgid ""
"See also :ref:`Applying a Patch from Mercurial to Git "
"<git_from_mercurial>`."
msgstr ""

#: ../../pullrequest.rst:400
msgid "Reviewing"
msgstr ""

#: ../../pullrequest.rst:402
msgid ""
"To begin with, please be patient! There are many more people submitting "
"pull requests than there are people capable of reviewing your pull "
"request. Getting your pull request reviewed requires a reviewer to have "
"the spare time and motivation to look at your pull request (we cannot "
"force anyone to review pull requests and no one is employed to look at "
"pull requests). If your pull request has not received any notice from "
"reviewers (i.e., no comment made) after one month, first \"ping\" the "
"issue on the `issue tracker`_ to remind the nosy list that the pull "
"request needs a review.  If you don't get a response within a week after "
"pinging the issue, then you can try emailing python-dev@python.org to ask"
" for someone to review your pull request."
msgstr ""

#: ../../pullrequest.rst:414
msgid ""
"When someone does manage to find the time to look at your pull request "
"they will most likely make comments about how it can be improved (don't "
"worry, even core developers of Python have their pull requests sent back "
"to them for changes).  It is then expected that you update your pull "
"request to address these comments, and the review process will thus "
"iterate until a satisfactory solution has emerged."
msgstr ""

#: ../../pullrequest.rst:425
msgid "How to Review a Pull Request"
msgstr ""

#: ../../pullrequest.rst:427
msgid ""
"One of the bottlenecks in the Python development process is the lack of "
"code reviews. If you browse the bug tracker, you will see that numerous "
"issues have a fix, but cannot be merged into the main source code "
"repository, because no one has reviewed the proposed solution. Reviewing "
"a pull request can be just as informative as providing a pull request and"
" it will allow you to give constructive comments on another developer's "
"work. This guide provides a checklist for submitting a code review. It is"
" a common misconception that in order to be useful, a code review has to "
"be perfect. This is not the case at all! It is helpful to just test the "
"pull request and/or play around with the code and leave comments in the "
"pull request or issue tracker."
msgstr ""

#: ../../pullrequest.rst:440
msgid ""
"If you have not already done so, get a copy of the CPython repository by "
"following the :ref:`setup guide <setup>`, build it and run the tests."
msgstr ""

#: ../../pullrequest.rst:443
msgid ""
"Check the bug tracker to see what steps are necessary to reproduce the "
"issue and confirm that you can reproduce the issue in your version of the"
" Python REPL (the interactive shell prompt), which you can launch by "
"executing ./python inside the repository."
msgstr ""

#: ../../pullrequest.rst:448
msgid ""
"Checkout and apply the pull request (Please refer to the instruction "
":ref:`git_pr`)"
msgstr ""

#: ../../pullrequest.rst:451
msgid "If the changes affect any C file, run the build again."
msgstr ""

#: ../../pullrequest.rst:453
msgid ""
"Launch the Python REPL (the interactive shell prompt) and check if you "
"can reproduce the issue. Now that the pull request has been applied, the "
"issue should be fixed (in theory, but mistakes do happen! A good review "
"aims to catch these before the code is merged into the Python "
"repository). You should also try to see if there are any corner cases in "
"this or related issues that the author of the fix may have missed."
msgstr ""

#: ../../pullrequest.rst:460
msgid ""
"If you have time, run the entire test suite. If you are pressed for time,"
" run the tests for the module(s) where changes were applied. However, "
"please be aware that if you are recommending a pull request as 'merge-"
"ready', you should always make sure the entire test suite passes."
msgstr ""

#: ../../pullrequest.rst:466
msgid "Leaving a Pull Request Review on GitHub"
msgstr ""

#: ../../pullrequest.rst:468
msgid ""
"When you review a pull request, you should provide additional details and"
" context of your review process."
msgstr ""

#: ../../pullrequest.rst:471
msgid ""
"Instead of simply \"approving\" the pull request, leave comments.  For "
"example:"
msgstr ""

#: ../../pullrequest.rst:473
msgid ""
"If you tested the PR, report the result and the system and version tested"
" on, such as 'Windows 10', 'Ubuntu 16.4', or 'Mac High Sierra'."
msgstr ""

#: ../../pullrequest.rst:476
msgid "If you request changes, try to suggest how."
msgstr ""

#: ../../pullrequest.rst:478
msgid ""
"Comment on what is \"good\" about the pull request, not just the \"bad\"."
" Doing so will make it easier for the PR author to find the good in your "
"comments."
msgstr ""

#: ../../pullrequest.rst:482
msgid "Dismissing Review from Another Core Developer"
msgstr ""

#: ../../pullrequest.rst:484
msgid ""
"A core developer can dismiss another core developer's review if they "
"confirmed that the requested changes have been made.  When a core "
"developer has assigned the PR to themselves, then it is a sign that they "
"are actively looking after the PR, and their review should not be "
"dismissed."
msgstr ""

#: ../../pullrequest.rst:491
msgid "Committing/Rejecting"
msgstr ""

#: ../../pullrequest.rst:493
msgid ""
"Once your pull request has reached an acceptable state (and thus "
"considered \"accepted\"), it will either be merged or rejected. If it is "
"rejected, please do not take it personally! Your work is still "
"appreciated regardless of whether your pull request is merged. Balancing "
"what *does* and *does not* go into Python is tricky and we simply cannot "
"accept everyone's contributions."
msgstr ""

#: ../../pullrequest.rst:499
msgid ""
"But if your pull request is merged it will then go into Python's "
":abbr:`VCS (version control system)` to be released with the next major "
"release of Python. It may also be backported to older versions of Python "
"as a bugfix if the core developer doing the merge believes it is "
"warranted."
msgstr ""

#: ../../pullrequest.rst:507
msgid "Crediting"
msgstr ""

#: ../../pullrequest.rst:509
msgid ""
"Non-trivial contributions are credited in the ``Misc/ACKS`` file (and, "
"most often, in a contribution's news entry as well).  You may be asked to"
" make these edits on the behalf of the core developer who accepts your "
"pull request."
msgstr ""

