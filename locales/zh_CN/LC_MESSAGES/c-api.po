# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 09:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../c-api.rst:3
msgid "Changing Python's C API"
msgstr ""

#: ../../c-api.rst:5
msgid "The C API is divided into three sections:"
msgstr ""

#: ../../c-api.rst:7
msgid ""
"The internal, private API, available with ``Py_BUILD_CORE`` defined. "
"Ideally declared in ``Include/internal/``. Any API named with a leading "
"underscore is also considered private."
msgstr ""

#: ../../c-api.rst:10
msgid ""
"The public C API, available when ``Python.h`` is included normally. "
"Ideally declared in ``Include/cpython/``."
msgstr ""

#: ../../c-api.rst:12
msgid ""
"The Limited API, available with ``Py_LIMITED_API`` defined. Ideally "
"declared directly under ``Include/``."
msgstr ""

#: ../../c-api.rst:15
msgid ""
"Each section has higher stability & maintenance requirements, and you "
"will need to think about more issues when you add or change definitions "
"in it."
msgstr ""

#: ../../c-api.rst:18
msgid ""
"The compatibility guarantees for public C API are explained in the user "
"documentation, ``Doc/c-api/stable.rst`` (:ref:`python:stable`)."
msgstr ""

#: ../../c-api.rst:23
msgid "The internal API"
msgstr ""

#: ../../c-api.rst:25
msgid ""
"Internal API is defined in ``Include/internal/`` and is only available "
"for building CPython itself, as indicated by a macro like "
"``Py_BUILD_CORE``."
msgstr ""

#: ../../c-api.rst:28
msgid ""
"While internal API can be changed at any time, it's still good to keep it"
" stable: other API or other CPython developers may depend on it."
msgstr ""

#: ../../c-api.rst:32
msgid "With PyAPI_FUNC or PyAPI_DATA"
msgstr ""

#: ../../c-api.rst:34
msgid ""
"Functions or structures in ``Include/internal/`` defined with "
"``PyAPI_FUNC`` or ``PyAPI_DATA`` are internal functions which are exposed"
" only for specific use cases like debuggers and profilers."
msgstr ""

#: ../../c-api.rst:40
msgid "With the extern keyword"
msgstr ""

#: ../../c-api.rst:42
msgid ""
"Functions in ``Include/internal/`` defined with the ``extern`` keyword "
"*must not and can not* be used outside the CPython code base.  Only "
"built-in stdlib extensions (built with the ``Py_BUILD_CORE_BUILTIN`` "
"macro defined) can use such functions."
msgstr ""

#: ../../c-api.rst:47
msgid ""
"When in doubt, new internal C functions should be defined in "
"``Include/internal`` using the ``extern`` keyword."
msgstr ""

#: ../../c-api.rst:51
msgid "Private names"
msgstr ""

#: ../../c-api.rst:53
msgid ""
"Any API named with a leading underscore is also considered internal. "
"There are two main use cases for using such names rather than putting the"
" definition in ``Include/internal/`` (or directly in a ``.c`` file):"
msgstr ""

#: ../../c-api.rst:57
msgid ""
"Internal helpers for other public API; users should not use these "
"directly;"
msgstr ""

#: ../../c-api.rst:58
msgid ""
"“Provisional” API, included in a Python release to test real-world usage "
"of new API. Such names should be renamed when stabilized; preferably with"
" a macro aliasing the old name to the new one. See `\"Finalizing the "
"API\" in PEP 590`_ for an example."
msgstr ""

#: ../../c-api.rst:69
msgid "Public C API"
msgstr ""

#: ../../c-api.rst:71
msgid ""
"CPython's public C API is available when ``Python.h`` is included "
"normally (that is, without defining macros to select the other variants)."
msgstr ""

#: ../../c-api.rst:74
msgid ""
"It should be defined in ``Include/cpython/`` (unless part of the Limited "
"API, see below)."
msgstr ""

#: ../../c-api.rst:77
msgid "Guidelines for expanding/changing the public API:"
msgstr ""

#: ../../c-api.rst:79
msgid ""
"Make sure the new API follows reference counting conventions. (Following "
"them makes the API easier to reason about, and easier use in other Python"
" implementations.)"
msgstr ""

#: ../../c-api.rst:83
msgid "Functions *must not* steal references"
msgstr ""

#: ../../c-api.rst:84
msgid "Functions *must not* return borrowed references"
msgstr ""

#: ../../c-api.rst:85
msgid "Functions returning references *must* return a strong reference"
msgstr ""

#: ../../c-api.rst:87
msgid ""
"Make sure the ownership rules and lifetimes of all applicable struct "
"fields, arguments and return values are well defined."
msgstr ""

#: ../../c-api.rst:92
msgid "Limited API"
msgstr ""

#: ../../c-api.rst:94
msgid ""
"The Limited API is a subset of the C API designed to guarantee ABI "
"stability across Python 3 versions. Defining the macro ``Py_LIMITED_API``"
" will limit the exposed API to this subset."
msgstr ""

#: ../../c-api.rst:99
msgid "No changes that break the Stable ABI are allowed."
msgstr ""

#: ../../c-api.rst:101
msgid ""
"The Limited API should be defined in ``Include/``, excluding the "
"``cpython`` and ``internal`` subdirectories."
msgstr ""

#: ../../c-api.rst:105
msgid "Guidelines for changing the Limited API"
msgstr ""

#: ../../c-api.rst:107
msgid "Guidelines for the general :ref:`public-capi` apply."
msgstr ""

#: ../../c-api.rst:109
msgid ""
"New Limited API should only be defined if ``Py_LIMITED_API`` is set to "
"the version the API was added in or higher. (See below for the proper "
"``#if`` guard.)"
msgstr ""

#: ../../c-api.rst:113
msgid ""
"All parameter types, return values, struct members, etc. need to be part "
"of the Limited API."
msgstr ""

#: ../../c-api.rst:116
msgid ""
"Functions that deal with ``FILE*`` (or other types with ABI portability "
"issues) should not be added."
msgstr ""

#: ../../c-api.rst:119
msgid "Think twice when defining macros."
msgstr ""

#: ../../c-api.rst:121
msgid "Macros should not expose implementation details"
msgstr ""

#: ../../c-api.rst:122
msgid ""
"Functions must be exported as actual functions, not (only) as functions-"
"like macros."
msgstr ""

#: ../../c-api.rst:124
msgid ""
"If possible, avoid macros. This makes the Limited API more usable in "
"languages that don't use the C preprocessor."
msgstr ""

#: ../../c-api.rst:127
msgid "Please start a public discussion before expanding the Limited API"
msgstr ""

#: ../../c-api.rst:129
msgid ""
"The Limited API and must follow standard C, not just features of "
"currently supported platforms. The exact C dialect is described in "
":pep:`7`."
msgstr ""

#: ../../c-api.rst:132
msgid ""
"Documentation examples (and more generally: the intended use of the API) "
"should also follow standard C."
msgstr ""

#: ../../c-api.rst:134
msgid ""
"In particular, do not cast a function pointer to ``void*`` (a data "
"pointer) or vice versa."
msgstr ""

#: ../../c-api.rst:137
msgid "Think about ease of use for the user."
msgstr ""

#: ../../c-api.rst:139
msgid ""
"In C, ease of use itself is not very important; what is useful is "
"reducing boilerplate code needed to use the API. Bugs like to hide in "
"boiler plates."
msgstr ""

#: ../../c-api.rst:143
msgid ""
"If a function will be often called with specific value for an argument, "
"consider making it default (used when ``NULL`` is passed in)."
msgstr ""

#: ../../c-api.rst:145
msgid "The Limited API needs to be well documented."
msgstr ""

#: ../../c-api.rst:147
msgid "Think about future extensions"
msgstr ""

#: ../../c-api.rst:149
msgid ""
"If it's possible that future Python versions will need to add a new field"
" to your struct, make sure it can be done."
msgstr ""

#: ../../c-api.rst:151
msgid ""
"Make as few assumptions as possible about implementation details that "
"might change in future CPython versions or differ across C API "
"implementations. The most important CPython-specific implementation "
"details involve:"
msgstr ""

#: ../../c-api.rst:156
msgid "The GIL"
msgstr ""

#: ../../c-api.rst:157
msgid ":ref:`Garbage collection <gc>`"
msgstr ""

#: ../../c-api.rst:158
msgid "Memory layout of PyObject, lists/tuples and other structures"
msgstr ""

#: ../../c-api.rst:160
msgid ""
"If following these guidelines would hurt performance, add a fast function"
" (or macro) to the non-limited API and a stable equivalent to the Limited"
" API."
msgstr ""

#: ../../c-api.rst:164
msgid ""
"If anything is unclear, or you have a good reason to break the "
"guidelines, consider discussing the change at the `capi-sig`_ mailing "
"list."
msgstr ""

#: ../../c-api.rst:170
msgid "Adding a new definition to the Limited API"
msgstr ""

#: ../../c-api.rst:172
msgid ""
"Add the declaration to a header file directly under ``Include/``, into a "
"block guarded with the following:"
msgstr ""

#: ../../c-api.rst:179
msgid ""
"with the ``yy`` corresponding to the target CPython version, e.g. "
"``0x030A0000`` for Python 3.10."
msgstr ""

#: ../../c-api.rst:181
msgid "Append an entry to the Stable ABI manifest, ``Misc/stable_abi.txt``."
msgstr ""

#: ../../c-api.rst:182
msgid ""
"Regenerate the autogenerated files using ``make regen-limited-abi``. On "
"platforms without ``make``, run this command directly:"
msgstr ""

#: ../../c-api.rst:189
msgid ""
"Build Python and check the using ``make check-limited-abi``. On platforms"
" without ``make``, run this command directly:"
msgstr ""

